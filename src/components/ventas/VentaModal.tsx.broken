'use client'

import { useState, useEffect } from 'react'
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { Textarea } from '@/components/ui/textarea'
import { useToast } from '@/components/ui/use-toast'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Switch } from '@/components/ui/switch'
import { Badge } from '@/components/ui/badge'
import { 
  Building2, 
  User, 
  DollarSign, 
  CreditCard, 
  Calendar, 
  FileText, 
  Users, 
  Calculator,
  Percent,
  Clock,
  CheckCircle,
  AlertCircle,
  Plus,
  X,
  Table as TableIcon
} from 'lucide-react'
import TablaAmortizacionModal from './TablaAmortizacionModal'

interface Cliente {
  id: string
  nombre: string
  apellido?: string
  email?: string
  telefono?: string
}

interface Unidad {
  id: string
  codigo: string
  precio: number
  estado: string
  tipoUnidad?: string
  manzana?: {
    nombre: string
    proyecto: {
      id: string
      nombre: string
    }
  }
  pabellon?: {
    nombre: string
    proyecto: {
      id: string
      nombre: string
    }
  }
}

interface VentaModalProps {
  isOpen: boolean
  onClose: () => void
  onSuccess: () => void
  tipoVenta: 'LOTE' | 'UNIDAD_CEMENTERIO'
  unidadId?: string
  proyectoId?: string
}

export default function VentaModal({ 
  isOpen, 
  onClose, 
  onSuccess, 
  tipoVenta, 
  unidadId,
  proyectoId
}: VentaModalProps) {
  const [loading, setLoading] = useState(false)
  const [loadingUnidades, setLoadingUnidades] = useState(false)
  const [clientes, setClientes] = useState<Cliente[]>([])
  const [unidades, setUnidades] = useState<Unidad[]>([])
  const [selectedUnidad, setSelectedUnidad] = useState<Unidad | null>(null)
  const [formData, setFormData] = useState({
    unidadId: unidadId || '',
    clienteId: '',
    fechaVenta: new Date().toISOString().split('T')[0],
    fechaEntrega: '',
    precioOriginal: '',
    precioVenta: '',
    montoDescuento: '',
    motivoDescuento: '',
    tipoVenta: 'CONTADO',
    formaPago: 'EFECTIVO',
    montoInicial: '',
    numeroCuotas: '12',
    frecuenciaCuota: 'MENSUAL',
    montoCuota: '',
    fechaPrimeraCuota: '',
    saldoPendiente: '',
    comisionVendedor: '',
    porcentajeComision: '',
    estadoDocumentacion: 'PENDIENTE',
    documentosRequeridos: '',
    condicionesEspeciales: '',
    observaciones: '',
    // NUEVO: Campos de amortizaci√≥n
    aplicarIntereses: false,
    tasaInteresAnual: '',
    montoIntereses: '',
    montoCapital: '',
    saldoCapital: '',
    // Campos para selecci√≥n de unidad
    manzanaId: '',
    vendedorId: '',
    // Campos para m√∫ltiples clientes
    clientes: [] as string[],
    // Campos para cuotas personalizadas
    cuotasPersonalizadas: false,
    cuotasPersonalizadasList: [] as Array<{monto: number, fecha: string, intereses?: number}>,
    // Campos para comprobantes
    comprobantesPago: [] as Array<{
      id: string
      tipo: 'INICIAL' | 'CUOTA' | 'CONTADO'
      monto: number
      fecha: string
      archivo: File | null
      nombreArchivo: string
      descripcion: string
    }>
  })
  const { toast } = useToast()

  // Estado para m√∫ltiples clientes
  const [clientesSeleccionados, setClientesSeleccionados] = useState<Cliente[]>([])
  const [clienteTemporal, setClienteTemporal] = useState<string>('')

  // Estado para vendedores
  const [vendedores, setVendedores] = useState<Array<{
    id: string
    nombre: string
    apellido: string
    email: string
    rol: string
    isActive: boolean
  }>>([])
  const [vendedorSeleccionado, setVendedorSeleccionado] = useState<string>('')

  // Estado para selecci√≥n procedimental
  const [manzanasPabellones, setManzanasPabellones] = useState<Array<{
    id: string
    nombre: string
    proyecto: {
      id: string
      nombre: string
    }
    unidades: Unidad[]
  }>>([])
  const [manzanaPabellonSeleccionado, setManzanaPabellonSeleccionado] = useState<string>('')
  const [unidadesDisponibles, setUnidadesDisponibles] = useState<Unidad[]>([])

  // Estado para cuotas personalizadas
  const [modoCuotasPersonalizadas, setModoCuotasPersonalizadas] = useState(false)
  const [cuotasPersonalizadas, setCuotasPersonalizadas] = useState<Array<{monto: number, fecha: string}>>([])
  
  // Estado para cuotas generadas autom√°ticamente
  const [cuotasGeneradas, setCuotasGeneradas] = useState<Array<{
    numeroCuota: number
    monto: number
    fechaVencimiento: Date
    estado: string
    montoPagado: number
    montoCapital: number
    montoInteres: number
    saldoCapitalAnterior: number
    saldoCapitalPosterior: number
  }>>([])
  
  // Estado para indicar si se est√°n generando las cuotas
  const [generandoCuotas, setGenerandoCuotas] = useState(false)
  
  const [showTablaAmortizacion, setShowTablaAmortizacion] = useState(false)

  // Estado para comprobantes de pago
  const [comprobantesPago, setComprobantesPago] = useState<Array<{
    id: string
    tipo: 'INICIAL' | 'CUOTA' | 'CONTADO'
    monto: number
    fecha: string
    archivo: File | null
    nombreArchivo: string
    descripcion: string
  }>>([])

  // Estado para la pesta√±a activa
  const [activeTab, setActiveTab] = useState('informacion')

  // Estado para validaciones
  const [validaciones, setValidaciones] = useState({
    precioVenta: { valido: true, mensaje: '' },
    montoInicial: { valido: true, mensaje: '' },
    saldoPendiente: { valido: true, mensaje: '' },
    numeroCuotas: { valido: true, mensaje: '' },
    montoCuota: { valido: true, mensaje: '' },
    fechaPrimeraCuota: { valido: true, mensaje: '' },
    cuotas: { valido: true, mensaje: '' }
  })

  // Limpiar formulario cuando se abre el modal
  useEffect(() => {
    if (isOpen) {
      limpiarFormulario()
    }
  }, [isOpen])

  // Cargar clientes
  useEffect(() => {
    const fetchClientes = async () => {
      try {
        console.log('üîç Cargando clientes...')
        const response = await fetch('/api/clientes')
        if (response.ok) {
          const data = await response.json()
          console.log('‚úÖ Clientes cargados:', data)
          setClientes(data)
        } else {
          console.error('‚ùå Error al cargar clientes:', response.status, response.statusText)
        }
      } catch (error) {
        console.error('‚ùå Error al cargar clientes:', error)
      }
    }

    if (isOpen) {
      fetchClientes()
    }
  }, [isOpen])

  // Cargar unidades disponibles y organizarlas por manzanas/pabellones
  useEffect(() => {
    const fetchUnidades = async () => {
      try {
        setLoadingUnidades(true)
        const endpoint = tipoVenta === 'LOTE' 
          ? '/api/ventas/lotes-disponibles'
          : '/api/ventas/unidades-cementerio-disponibles'
        
        // Si tenemos proyectoId, filtrar por proyecto
        const url = proyectoId 
          ? `${endpoint}?proyectoId=${proyectoId}`
          : endpoint
        
        const response = await fetch(url)
        
        if (response.ok) {
          const data = await response.json()
          setUnidades(data)
          
          // Organizar unidades por manzanas/pabellones
          const manzanasPabellonesMap = new Map()
          
          data.forEach((unidad: Unidad) => {
            const proyectoInfo = tipoVenta === 'LOTE' 
              ? unidad.manzana?.proyecto 
              : unidad.pabellon?.proyecto
            const manzanaPabellonInfo = tipoVenta === 'LOTE' 
              ? unidad.manzana 
              : unidad.pabellon
            
            // Filtrar por proyecto si se proporciona proyectoId
            if (proyectoId && proyectoInfo && proyectoInfo.id !== proyectoId) {
              return // Saltar esta unidad si no pertenece al proyecto
            }
            
            if (proyectoInfo && manzanaPabellonInfo) {
              const key = `${proyectoInfo.id}-${manzanaPabellonInfo.nombre}`
              
              if (!manzanasPabellonesMap.has(key)) {
                manzanasPabellonesMap.set(key, {
                  id: key,
                  nombre: manzanaPabellonInfo.nombre,
                  proyecto: {
                    id: proyectoInfo.id,
                    nombre: proyectoInfo.nombre
                  },
                  unidades: []
                })
              }
              
              manzanasPabellonesMap.get(key).unidades.push(unidad)
            }
          })
          
          const manzanasPabellonesArray = Array.from(manzanasPabellonesMap.values())
          setManzanasPabellones(manzanasPabellonesArray)
          
          // Si solo hay una manzana/pabell√≥n y tenemos proyectoId, seleccionarla autom√°ticamente
          if (proyectoId && manzanasPabellonesArray.length === 1) {
            setManzanaPabellonSeleccionado(manzanasPabellonesArray[0].id)
            setFormData(prev => ({ ...prev, manzanaId: manzanasPabellonesArray[0].id }))
          }
        } else {
          toast({
            title: 'Error',
            description: 'Error al cargar las unidades disponibles',
            variant: 'destructive'
          })
        }
      } catch (error) {
        console.error('Error al cargar unidades:', error)
        toast({
          title: 'Error',
          description: 'Error al cargar las unidades disponibles',
          variant: 'destructive'
        })
      } finally {
        setLoadingUnidades(false)
      }
    }

    if (isOpen) {
      fetchUnidades()
    }
  }, [isOpen, tipoVenta, proyectoId, toast])

  // Actualizar unidades disponibles cuando se selecciona una manzana/pabell√≥n
  useEffect(() => {
    if (manzanaPabellonSeleccionado) {
      const manzanaPabellon = manzanasPabellones.find(mp => mp.id === manzanaPabellonSeleccionado)
      if (manzanaPabellon) {
        setUnidadesDisponibles(manzanaPabellon.unidades)
      }
    } else {
      // Si no hay manzana seleccionada, mostrar todas las unidades del proyecto
      if (proyectoId) {
        setUnidadesDisponibles(unidades)
      } else {
        setUnidadesDisponibles([])
      }
    }
    
    // Limpiar unidad seleccionada cuando cambia la manzana/pabell√≥n
    setFormData(prev => ({ ...prev, unidadId: '' }))
    setSelectedUnidad(null)
  }, [manzanaPabellonSeleccionado, manzanasPabellones, proyectoId, unidades])

  // Cargar vendedores
  useEffect(() => {
    const fetchVendedores = async () => {
      try {
        console.log('Llamando endpoint de vendedores...')
        const response = await fetch('/api/vendedores')
        console.log('Respuesta del endpoint:', response.status)
        if (response.ok) {
          const data = await response.json()
          console.log('Datos recibidos de vendedores:', data)
          // Extraer solo los usuarios de los perfiles de vendedor
          const usuariosVendedores = data.vendedores.map((perfil: any) => perfil.usuario)
          setVendedores(usuariosVendedores || [])
        } else if (response.status === 403) {
          console.warn('No tienes permisos para ver vendedores')
          setVendedores([])
        } else {
          console.error('Error al cargar vendedores:', response.status)
          setVendedores([])
        }
      } catch (error) {
        console.error('Error al cargar vendedores:', error)
        setVendedores([])
      }
    }

    if (isOpen) {
      fetchVendedores()
    }
  }, [isOpen])

  // Actualizar unidad seleccionada
  useEffect(() => {
    if (formData.unidadId) {
      const unidad = unidadesDisponibles.find(u => u.id === formData.unidadId)
      setSelectedUnidad(unidad || null)
      if (unidad) {
        const precioOriginal = unidad.precio
        const precioVenta = unidad.precio
        const montoDescuento = 0
        
        setFormData(prev => ({ 
          ...prev, 
          precioOriginal: precioOriginal.toString(),
          precioVenta: precioVenta.toString(),
          montoDescuento: montoDescuento.toString()
        }))
      } else {
        setFormData({...formData, unidadId: formData.unidadId})
      }
    }
  }, [formData.unidadId, unidadesDisponibles])

  // Calcular descuento y precio de venta
  useEffect(() => {
    const precioOriginal = parseFloat(formData.precioOriginal) || 0
    const montoDescuento = parseFloat(formData.montoDescuento) || 0
    const precioVenta = precioOriginal - montoDescuento
    
    if (precioVenta > 0) {
      setFormData(prev => ({ 
        ...prev, 
        precioVenta: precioVenta.toFixed(2)
      }))
      
      // Validar descuento
      if (montoDescuento > precioOriginal) {
        setValidaciones(prev => ({
          ...prev,
          precioVenta: { 
            valido: false, 
            mensaje: 'El descuento no puede ser mayor al precio original' 
          }
        }))
      } else if (montoDescuento < 0) {
        setValidaciones(prev => ({
          ...prev,
          precioVenta: { 
            valido: false, 
            mensaje: 'El descuento no puede ser negativo' 
          }
        }))
      } else {
        setValidaciones(prev => ({
          ...prev,
          precioVenta: { valido: true, mensaje: '' }
        }))
      }
    } else {
      setFormData(prev => ({ 
        ...prev, 
        precioVenta: '0.00'
      }))
      setValidaciones(prev => ({
        ...prev,
        precioVenta: { 
          valido: false, 
          mensaje: 'El precio de venta debe ser mayor a 0' 
        }
      }))
    }
  }, [formData.precioOriginal, formData.montoDescuento])

  // Calcular monto por cuota
  useEffect(() => {
    if (formData.tipoVenta === 'CUOTAS') {
      const precioVenta = parseFloat(formData.precioVenta) || 0
      const montoInicial = parseFloat(formData.montoInicial) || 0
      const numeroCuotas = parseInt(formData.numeroCuotas) || 1
      const saldoFinanciar = precioVenta - montoInicial
      
      // Validar monto inicial
      if (montoInicial > precioVenta) {
        setValidaciones(prev => ({
          ...prev,
          montoInicial: { 
            valido: false, 
            mensaje: 'El monto inicial no puede ser mayor al precio de venta' 
          }
        }))
      } else if (montoInicial < 0) {
        setValidaciones(prev => ({
          ...prev,
          montoInicial: { 
            valido: false, 
            mensaje: 'El monto inicial debe ser mayor o igual a 0' 
          }
        }))
      } else {
        setValidaciones(prev => ({
          ...prev,
          montoInicial: { valido: true, mensaje: '' }
        }))
      }

      // Validar n√∫mero de cuotas
      if (numeroCuotas <= 0) {
        setValidaciones(prev => ({
          ...prev,
          cuotas: { 
            valido: false, 
            mensaje: 'El n√∫mero de cuotas debe ser mayor a 0' 
          }
        }))
      } else if (numeroCuotas > 120) {
        setValidaciones(prev => ({
          ...prev,
          cuotas: { 
            valido: false, 
            mensaje: 'El n√∫mero de cuotas no puede exceder 120' 
          }
        }))
      } else {
        setValidaciones(prev => ({
          ...prev,
          cuotas: { valido: true, mensaje: '' }
        }))
      }

      // Validar saldo pendiente
      if (saldoFinanciar < 0) {
        setValidaciones(prev => ({
          ...prev,
          saldoPendiente: { 
            valido: false, 
            mensaje: 'El saldo pendiente no puede ser negativo' 
          }
        }))
      } else {
        setValidaciones(prev => ({
          ...prev,
          saldoPendiente: { valido: true, mensaje: '' }
        }))
      }
      
      // Calcular monto por cuota
      let montoCuota = 0
      if (numeroCuotas > 0) {
        // Si hay intereses aplicados, usar amortizaci√≥n
        if (formData.aplicarIntereses && parseFloat(formData.tasaInteresAnual) > 0) {
          const tasaInteresAnual = parseFloat(formData.tasaInteresAnual)
          
          // Calcular la tasa de inter√©s seg√∫n la frecuencia
          let periodosPorAno = 12 // Por defecto mensual
          
          switch (formData.frecuenciaCuota) {
            case 'MENSUAL':
              periodosPorAno = 12
              break
            case 'BIMESTRAL':
              periodosPorAno = 6
              break
            case 'TRIMESTRAL':
              periodosPorAno = 4
              break
            case 'SEMESTRAL':
              periodosPorAno = 2
              break
            case 'ANUAL':
              periodosPorAno = 1
              break
            case 'QUINCENAL':
              periodosPorAno = 24
              break
            case 'SEMANAL':
              periodosPorAno = 52
              break
            default:
              periodosPorAno = 12
          }
          
          const tasaInteresPorPeriodo = tasaInteresAnual / periodosPorAno / 100
          
          // F√≥rmula de amortizaci√≥n francesa
          montoCuota = saldoFinanciar * (tasaInteresPorPeriodo * Math.pow(1 + tasaInteresPorPeriodo, numeroCuotas)) / (Math.pow(1 + tasaInteresPorPeriodo, numeroCuotas) - 1)
        } else {
          // C√°lculo sin intereses
          const montoCuotaDecimal = saldoFinanciar / numeroCuotas
          // Tomar solo la parte entera para las cuotas regulares
          const cuotaEntera = Math.floor(montoCuotaDecimal)
          
          // Calcular la diferencia que se acumular√° en la √∫ltima cuota
          const diferencia = saldoFinanciar - (cuotaEntera * numeroCuotas)
          
          // El monto por cuota que se muestra es la cuota entera
          montoCuota = cuotaEntera
          
          // Si hay diferencia, se acumular√° en la √∫ltima cuota
          // pero el campo montoCuota debe mostrar la cuota entera
        }
      }
      
      setFormData(prev => ({ 
        ...prev, 
        montoCuota: montoCuota.toFixed(2),
        saldoPendiente: saldoFinanciar.toFixed(2)
      }))
    }
  }, [formData.tipoVenta, formData.precioVenta, formData.montoInicial, formData.numeroCuotas, formData.aplicarIntereses, formData.tasaInteresAnual, formData.frecuenciaCuota])

  // Funciones para calcular comisiones
  const calcularPorcentajeDesdeMonto = (monto: string) => {
    const precioVenta = parseFloat(formData.precioVenta) || 0
    const montoComision = parseFloat(monto) || 0
    
    if (precioVenta > 0 && montoComision > 0) {
      const porcentaje = (montoComision / precioVenta) * 100
      setFormData(prev => ({ 
        ...prev, 
        porcentajeComision: porcentaje.toFixed(2)
      }))
    }
  }

  const calcularMontoDesdePorcentaje = (porcentaje: string) => {
    const precioVenta = parseFloat(formData.precioVenta) || 0
    const porcentajeComision = parseFloat(porcentaje) || 0
    
    if (precioVenta > 0 && porcentajeComision > 0) {
      const monto = (precioVenta * porcentajeComision) / 100
      setFormData(prev => ({ 
        ...prev, 
        comisionVendedor: monto.toFixed(2)
      }))
    }
  }

  // Funci√≥n para validar si el formulario est√° completo
  const isFormValid = () => {
    // Campos b√°sicos obligatorios
    if (!formData.unidadId || clientesSeleccionados.length === 0) {
      return false
    }

    // Validar precios
    if (!formData.precioVenta || parseFloat(formData.precioVenta) <= 0) {
      return false
    }

    if (!formData.precioOriginal || parseFloat(formData.precioOriginal) <= 0) {
      return false
    }

    // Validar vendedor
    if (!vendedorSeleccionado) {
      return false
    }

    // Validar comprobantes de pago solo si hay pagos que justifiquen comprobantes
    const hayPagosQueRequierenComprobantes = (() => {
      if (formData.tipoVenta === 'CONTADO') {
        const montoTotal = parseFloat(formData.precioVenta) || 0
        return montoTotal > 0
      } else if (formData.tipoVenta === 'CUOTAS') {
        const montoInicial = parseFloat(formData.montoInicial) || 0
        if (montoInicial > 0) return true
        
        // Verificar si hay cuotas personalizadas vencidas con montos > 0
        if (modoCuotasPersonalizadas && cuotasPersonalizadas.length > 0) {
          const fechaActual = new Date()
          fechaActual.setHours(0, 0, 0, 0)
          return cuotasPersonalizadas.some(cuota => {
            if (cuota.monto > 0) {
              const fechaCuota = new Date(cuota.fecha)
              fechaCuota.setHours(0, 0, 0, 0)
              return fechaCuota <= fechaActual
            }
            return false
          })
        }
        
        // Para cuotas regulares, verificar si hay saldo a financiar
        const saldoPendiente = parseFloat(formData.saldoPendiente) || 0
        return saldoPendiente > 0
      }
      return false
    })()

    if (hayPagosQueRequierenComprobantes) {
      if (comprobantesPago.length === 0) {
        return false
      }

      // Verificar que todos los comprobantes tengan archivo adjunto
      const comprobantesSinArchivo = comprobantesPago.filter(comp => !comp.archivo)
      if (comprobantesSinArchivo.length > 0) {
        return false
      }
    }

    // Validaciones espec√≠ficas para ventas en cuotas
    if (formData.tipoVenta === 'CUOTAS') {
      if (!formData.numeroCuotas || parseInt(formData.numeroCuotas) <= 0) {
        return false
      }

      // Para cuotas personalizadas, usar la fecha de la primera cuota
      if (modoCuotasPersonalizadas) {
        if (cuotasPersonalizadas.length === 0) {
          toast({
            title: 'Error',
            description: 'Debes agregar al menos una cuota personalizada en la pesta√±a "Cuotas"',
            variant: 'destructive'
          })
          return
        }
      } else {
        // Para cuotas regulares, validar fechaPrimeraCuota del formulario
        if (!formData.fechaPrimeraCuota) {
          toast({
            title: 'Error',
            description: 'Debes configurar la fecha de la primera cuota en la pesta√±a "Cuotas"',
            variant: 'destructive'
          })
          return
        }
      }
    }

    // Verificar que no hay errores de validaci√≥n
    const hayErrores = Object.values(validaciones).some(v => !v.valido)
    if (hayErrores) {
      return false
    }

    return true
  }

  // Funci√≥n para obtener el progreso del formulario
  const getFormProgress = () => {
    // Determinar si se requieren comprobantes
    const hayPagosQueRequierenComprobantes = (() => {
      if (formData.tipoVenta === 'CONTADO') {
        const montoTotal = parseFloat(formData.precioVenta) || 0
        return montoTotal > 0
      } else if (formData.tipoVenta === 'CUOTAS') {
        const montoInicial = parseFloat(formData.montoInicial) || 0
        if (montoInicial > 0) return true
        
        // Verificar si hay cuotas personalizadas vencidas con montos > 0
        if (modoCuotasPersonalizadas && cuotasPersonalizadas.length > 0) {
          const fechaActual = new Date()
          fechaActual.setHours(0, 0, 0, 0)
          return cuotasPersonalizadas.some(cuota => {
            if (cuota.monto > 0) {
              const fechaCuota = new Date(cuota.fecha)
              fechaCuota.setHours(0, 0, 0, 0)
              return fechaCuota <= fechaActual
            }
            return false
          })
        }
        
        // Para cuotas regulares, verificar si hay saldo a financiar
        const saldoPendiente = parseFloat(formData.saldoPendiente) || 0
        return saldoPendiente > 0
      }
      return false
    })()

    const camposObligatorios = [
      { nombre: 'Unidad', valido: !!formData.unidadId },
      { nombre: 'Clientes', valido: clientesSeleccionados.length > 0 },
      { nombre: 'Precio Original', valido: !!(formData.precioOriginal && parseFloat(formData.precioOriginal) > 0) },
      { nombre: 'Precio Venta', valido: !!(formData.precioVenta && parseFloat(formData.precioVenta) > 0) },
      { nombre: 'Vendedor', valido: !!vendedorSeleccionado }
    ]

    // Solo agregar comprobantes como campo obligatorio si hay pagos que los requieren
    if (hayPagosQueRequierenComprobantes) {
      camposObligatorios.push({ 
        nombre: 'Comprobantes', 
        valido: comprobantesPago.length > 0 && comprobantesPago.every(comp => comp.archivo) 
      })
    }

    // Agregar campos espec√≠ficos para cuotas
    if (formData.tipoVenta === 'CUOTAS') {
      camposObligatorios.push(
        { nombre: 'N√∫mero Cuotas', valido: !!(formData.numeroCuotas && parseInt(formData.numeroCuotas) > 0) },
        { nombre: 'Cuotas Personalizadas', valido: cuotasPersonalizadas.length > 0 },
        { nombre: 'Fecha Primera Cuota', valido: cuotasPersonalizadas.length > 0 },
        { nombre: 'Saldo Pendiente', valido: !!(formData.saldoPendiente && parseFloat(formData.saldoPendiente) > 0) }
      )
    } else {
      camposObligatorios.push(
        { nombre: 'Fecha Primera Cuota', valido: !!formData.fechaPrimeraCuota },
        { nombre: 'Saldo Pendiente', valido: !!(formData.saldoPendiente && parseFloat(formData.saldoPendiente) > 0) }
      )
    }

    const camposCompletados = camposObligatorios.filter(campo => campo.valido).length
    const totalCampos = camposObligatorios.length
    const porcentaje = Math.round((camposCompletados / totalCampos) * 100)

    return {
      porcentaje,
      camposCompletados,
      totalCampos,
      camposFaltantes: camposObligatorios.filter(campo => !campo.valido).map(campo => campo.nombre)
    }
  }

  // Funci√≥n para limpiar el formulario
  const limpiarFormulario = () => {
    setFormData({
      unidadId: unidadId || '',
      clienteId: '',
      fechaVenta: new Date().toISOString().split('T')[0],
      fechaEntrega: '',
      precioOriginal: '',
      precioVenta: '',
      montoDescuento: '',
      motivoDescuento: '',
      tipoVenta: 'CONTADO',
      formaPago: 'EFECTIVO',
      montoInicial: '',
      numeroCuotas: '12',
      frecuenciaCuota: 'MENSUAL',
      montoCuota: '',
      fechaPrimeraCuota: '',
      saldoPendiente: '',
      comisionVendedor: '',
      porcentajeComision: '',
      estadoDocumentacion: 'PENDIENTE',
      documentosRequeridos: '',
      condicionesEspeciales: '',
      observaciones: '',
      // NUEVO: Campos de amortizaci√≥n
      aplicarIntereses: false,
      tasaInteresAnual: '',
      montoIntereses: '',
      montoCapital: '',
      saldoCapital: '',
      // Campos para selecci√≥n de unidad
      manzanaId: '',
      vendedorId: '',
      // Campos para m√∫ltiples clientes
      clientes: [] as string[],
      // Campos para cuotas personalizadas
      cuotasPersonalizadas: false,
      cuotasPersonalizadasList: [] as Array<{monto: number, fecha: string, intereses?: number}>,
      // Campos para comprobantes
      comprobantesPago: [] as Array<{
        id: string
        tipo: 'INICIAL' | 'CUOTA' | 'CONTADO'
        monto: number
        fecha: string
        archivo: File | null
        nombreArchivo: string
        descripcion: string
      }>
    })
    setClientesSeleccionados([])
    setClienteTemporal('')
    setVendedorSeleccionado('')
    setManzanaPabellonSeleccionado('')
    setUnidadesDisponibles([])
    setSelectedUnidad(null)
    setModoCuotasPersonalizadas(false)
    setCuotasPersonalizadas([])
    setFormData(prev => ({
      ...prev,
      cuotasPersonalizadasList: []
    }))
    setCuotasGeneradas([])
    setGenerandoCuotas(false)
    setComprobantesPago([])
    setActiveTab('informacion')
    setValidaciones({
      precioVenta: { valido: true, mensaje: '' },
      montoInicial: { valido: true, mensaje: '' },
      saldoPendiente: { valido: true, mensaje: '' },
      numeroCuotas: { valido: true, mensaje: '' },
      montoCuota: { valido: true, mensaje: '' },
      fechaPrimeraCuota: { valido: true, mensaje: '' },
      cuotas: { valido: true, mensaje: '' }
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    // Validar que no hay errores antes de enviar
    const hayErrores = Object.values(validaciones).some(v => !v.valido)
    if (hayErrores) {
      toast({
        title: 'Error de validaci√≥n',
        description: 'Por favor, corrige los errores en el formulario antes de continuar',
        variant: 'destructive'
      })
      return
    }

    // Validar que se haya seleccionado al menos un cliente
    if (clientesSeleccionados.length === 0) {
      toast({
        title: 'Error',
        description: 'Agrega al menos un cliente en la pesta√±a "Clientes"',
        variant: 'destructive'
      })
      return
    }

    // Validar que se haya seleccionado una unidad
    if (!formData.unidadId) {
      toast({
        title: 'Error',
        description: 'Debes seleccionar una unidad',
        variant: 'destructive'
      })
      return
    }

    // Validar comprobantes de pago solo si hay pagos que los justifiquen
    const hayPagosQueRequierenComprobantes = (() => {
      if (formData.tipoVenta === 'CONTADO') {
        const montoTotal = parseFloat(formData.precioVenta) || 0
        return montoTotal > 0
      } else if (formData.tipoVenta === 'CUOTAS') {
        const montoInicial = parseFloat(formData.montoInicial) || 0
        if (montoInicial > 0) return true
        
        // Verificar si hay cuotas personalizadas vencidas con montos > 0
        if (modoCuotasPersonalizadas && cuotasPersonalizadas.length > 0) {
          const fechaActual = new Date()
          fechaActual.setHours(0, 0, 0, 0)
          return cuotasPersonalizadas.some(cuota => {
            if (cuota.monto > 0) {
              const fechaCuota = new Date(cuota.fecha)
              fechaCuota.setHours(0, 0, 0, 0)
              return fechaCuota <= fechaActual
            }
            return false
          })
        }
        
        // Para cuotas regulares, verificar si hay saldo a financiar
        const saldoPendiente = parseFloat(formData.saldoPendiente) || 0
        return saldoPendiente > 0
      }
      return false
    })()

    if (hayPagosQueRequierenComprobantes) {
      if (comprobantesPago.length === 0) {
        toast({
          title: 'Error',
          description: 'Debes generar y completar los comprobantes de pago en la pesta√±a "Comprobantes"',
          variant: 'destructive'
        })
        return
      }

      // Verificar que todos los comprobantes tengan archivo adjunto
      const comprobantesSinArchivo = comprobantesPago.filter(comp => !comp.archivo)
      if (comprobantesSinArchivo.length > 0) {
        toast({
          title: 'Error',
          description: `Faltan ${comprobantesSinArchivo.length} comprobante(s) sin archivo adjunto`,
          variant: 'destructive'
        })
        return
      }
    }

    // Validar configuraci√≥n de cuotas si es venta en cuotas
    if (formData.tipoVenta === 'CUOTAS') {
      const montoInicial = parseFloat(formData.montoInicial) || 0
      const numeroCuotas = parseInt(formData.numeroCuotas) || 0
      
      if (numeroCuotas <= 0) {
        toast({
          title: 'Error',
          description: 'Debes configurar el n√∫mero de cuotas en la pesta√±a "Cuotas"',
          variant: 'destructive'
        })
        return
      }
      
      // Para cuotas personalizadas, validar que haya al menos una cuota
      if (modoCuotasPersonalizadas) {
        if (cuotasPersonalizadas.length === 0) {
          toast({
            title: 'Error',
            description: 'Debes agregar al menos una cuota personalizada en la pesta√±a "Cuotas"',
            variant: 'destructive'
          })
          return
        }
      } else {
        // Para cuotas regulares, validar fechaPrimeraCuota del formulario
        if (!formData.fechaPrimeraCuota) {
          toast({
            title: 'Error',
            description: 'Debes configurar la fecha de la primera cuota en la pesta√±a "Cuotas"',
            variant: 'destructive'
          })
          return
        }
      }
    }

    setLoading(true)

    try {
      // Crear FormData para enviar archivos
      const formDataToSend = new FormData()
      
      // Agregar datos de la venta
      const ventaData = {
        ...formData,
        clienteIds: clientesSeleccionados.map(c => c.id),
        vendedorId: vendedorSeleccionado,
        cuotasPersonalizadas: modoCuotasPersonalizadas ? cuotasPersonalizadas : undefined,
        cuotasGeneradas: cuotasGeneradas.length > 0 ? cuotasGeneradas : undefined
      }
      
      formDataToSend.append('ventaData', JSON.stringify(ventaData))
      
      // Agregar archivos de comprobantes
      comprobantesPago.forEach((comprobante, index) => {
        if (comprobante.archivo) {
          formDataToSend.append(`comprobante_${index}`, comprobante.archivo)
          formDataToSend.append(`comprobante_${index}_data`, JSON.stringify({
            tipo: comprobante.tipo,
            monto: comprobante.monto,
            fecha: comprobante.fecha,
            descripcion: comprobante.descripcion
          }))
        }
      })

      console.log('Datos a enviar:', ventaData)
      console.log('Comprobantes:', comprobantesPago.length)

      const response = await fetch('/api/ventas', {
        method: 'POST',
        body: formDataToSend
      })

      if (response.ok) {
        toast({
          title: '√âxito',
          description: 'Venta creada correctamente'
        })
        limpiarFormulario()
        onSuccess()
        onClose()
      } else {
        const error = await response.json()
        throw new Error(error.error || 'Error al crear la venta')
      }
    } catch (error) {
      console.error('Error:', error)
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Error al crear la venta',
        variant: 'destructive'
      })
    } finally {
      setLoading(false)
    }
  }

  const agregarCliente = () => {
    console.log('üîç agregarCliente llamado con:', { clienteId: formData.clienteId, clientesActuales: formData.clientes })
    
    if (!formData.clienteId) {
      toast({
        title: 'Error',
        description: 'Por favor selecciona un cliente primero',
        variant: 'destructive'
      })
      return
    }
    
    if (formData.clientes.includes(formData.clienteId)) {
      toast({
        title: 'Cliente ya agregado',
        description: 'Este cliente ya est√° en la lista',
        variant: 'destructive'
      })
      return
    }
    
    // Agregar el cliente
    setFormData(prev => ({
      ...prev,
      clientes: [...prev.clientes, formData.clienteId],
      clienteId: '' // Limpiar el selector despu√©s de agregar
    }))
    
    // Mostrar mensaje de √©xito
    toast({
      title: 'Cliente agregado',
      description: 'El cliente ha sido agregado a la venta',
      variant: 'default'
    })
    
    console.log('‚úÖ Cliente agregado exitosamente')
  }

  const removerCliente = (clienteId: string) => {
    console.log('üîç removerCliente llamado con:', { clienteId, clientesActuales: formData.clientes })
    
    setFormData(prev => ({
      ...prev,
      clientes: prev.clientes.filter(id => id !== clienteId)
    }))
    
    // Mostrar mensaje de confirmaci√≥n
    toast({
      title: 'Cliente removido',
      description: 'El cliente ha sido removido de la venta',
      variant: 'default'
    })
    
    console.log('‚úÖ Cliente removido exitosamente')
  }

  const agregarCuotaPersonalizada = () => {
    console.log('üîÑ Agregando cuota personalizada...')
    
    // Calcular una fecha apropiada para la nueva cuota
    const fechaActual = new Date()
    const fechaPrimeraCuota = formData.fechaPrimeraCuota ? new Date(formData.fechaPrimeraCuota) : fechaActual
    
    // Si no hay cuotas, usar la fecha de primera cuota o fecha actual + 1 mes
    let fechaNuevaCuota = fechaActual
    if (cuotasPersonalizadas.length === 0) {
      fechaNuevaCuota = fechaPrimeraCuota > fechaActual ? fechaPrimeraCuota : new Date(fechaActual.getTime() + 30 * 24 * 60 * 60 * 1000)
    } else {
      // Si ya hay cuotas, usar la fecha de la √∫ltima cuota + 1 mes
      const ultimaCuota = cuotasPersonalizadas[cuotasPersonalizadas.length - 1]
      const fechaUltimaCuota = new Date(ultimaCuota.fecha)
      fechaNuevaCuota = new Date(fechaUltimaCuota.getTime() + 30 * 24 * 60 * 60 * 1000)
    }
    
    const nuevaCuota = {
      monto: 0,
      fecha: fechaNuevaCuota.toISOString().split('T')[0]
    }
    
    console.log('üìÖ Nueva cuota:', nuevaCuota)
    console.log('üìä Estado actual cuotasPersonalizadas:', cuotasPersonalizadas)
    
    // Actualizar ambos estados para mantener sincronizaci√≥n
    setCuotasPersonalizadas(prev => {
      const nuevoEstado = [...prev, nuevaCuota]
      console.log('‚úÖ Nuevo estado cuotasPersonalizadas:', nuevoEstado)
      return nuevoEstado
    })
    
    setFormData(prev => {
      const nuevoFormData = {
        ...prev,
        cuotasPersonalizadasList: [...prev.cuotasPersonalizadasList, nuevaCuota]
      }
      console.log('‚úÖ Nuevo estado formData.cuotasPersonalizadasList:', nuevoFormData.cuotasPersonalizadasList)
      return nuevoFormData
    })
  }

  const actualizarCuotaPersonalizada = (index: number, campo: 'monto' | 'fecha', valor: string | number) => {
    // Actualizar ambos estados para mantener sincronizaci√≥n
    setCuotasPersonalizadas(prev => prev.map((cuota, i) => 
      i === index ? { ...cuota, [campo]: valor } : cuota
    ))
    setFormData(prev => ({
      ...prev,
      cuotasPersonalizadasList: prev.cuotasPersonalizadasList.map((cuota, i) => 
        i === index ? { ...cuota, [campo]: valor } : cuota
      )
    }))
  }

  const removerCuotaPersonalizada = (index: number) => {
    // Actualizar ambos estados para mantener sincronizaci√≥n
    setCuotasPersonalizadas(prev => prev.filter((_, i) => i !== index))
    setFormData(prev => ({
      ...prev,
      cuotasPersonalizadasList: prev.cuotasPersonalizadasList.filter((_, i) => i !== index)
    }))
  }

  // Funciones para manejar comprobantes de pago
  const agregarComprobantePago = (tipo: 'INICIAL' | 'CUOTA' | 'CONTADO', monto: number, fecha: string) => {
    const nuevoComprobante = {
      id: `comp-${Date.now()}-${Math.random()}`,
      tipo,
      monto,
      fecha,
      archivo: null,
      nombreArchivo: '',
      descripcion: ''
    }
    setComprobantesPago(prev => [...prev, nuevoComprobante])
  }

  const actualizarComprobantePago = (id: string, campo: 'archivo' | 'nombreArchivo' | 'descripcion', valor: any) => {
    setComprobantesPago(prev => prev.map(comp => 
      comp.id === id ? { ...comp, [campo]: valor } : comp
    ))
  }

  const removerComprobantePago = (id: string) => {
    setComprobantesPago(prev => prev.filter(comp => comp.id !== id))
  }

  const handleFileUpload = (id: string, file: File) => {
    if (file) {
      // Validar tipo de archivo (PDF, JPG, PNG)
      const tiposPermitidos = ['application/pdf', 'image/jpeg', 'image/png', 'image/jpg']
      if (!tiposPermitidos.includes(file.type)) {
        toast({
          title: 'Error',
          description: 'Solo se permiten archivos PDF, JPG o PNG',
          variant: 'destructive'
        })
        return
      }

      // Validar tama√±o (m√°ximo 5MB)
      if (file.size > 5 * 1024 * 1024) {
        toast({
          title: 'Error',
          description: 'El archivo no puede ser mayor a 5MB',
          variant: 'destructive'
        })
        return
      }

      actualizarComprobantePago(id, 'archivo', file)
      actualizarComprobantePago(id, 'nombreArchivo', file.name)
    }
  }

  // Funci√≥n para generar comprobantes autom√°ticamente seg√∫n el tipo de venta
  const generarComprobantesAutomaticos = () => {
    const nuevosComprobantes: Array<{
      id: string
      tipo: 'INICIAL' | 'CUOTA' | 'CONTADO'
      monto: number
      fecha: string
      archivo: File | null
      nombreArchivo: string
      descripcion: string
    }> = []

    const fechaActual = new Date()
    fechaActual.setHours(0, 0, 0, 0) // Normalizar a inicio del d√≠a

    if (formData.tipoVenta === 'CONTADO') {
      // Para venta al contado, generar un comprobante por el monto total
      const montoTotal = parseFloat(formData.precioVenta) || 0
      if (montoTotal > 0) {
        nuevosComprobantes.push({
          id: `comp-contado-${Date.now()}`,
          tipo: 'CONTADO',
          monto: montoTotal,
          fecha: formData.fechaVenta,
          archivo: null,
          nombreArchivo: '',
          descripcion: 'Pago al contado'
        })
      } else {
        toast({
          title: 'Sin comprobantes para generar',
          description: 'El precio de venta es cero, no se requieren comprobantes de pago',
          variant: 'default'
        })
        return
      }
    } else if (formData.tipoVenta === 'CUOTAS') {
      // Para venta en cuotas, generar comprobante por el monto inicial
      const montoInicial = parseFloat(formData.montoInicial) || 0
      if (montoInicial > 0) {
        nuevosComprobantes.push({
          id: `comp-inicial-${Date.now()}`,
          tipo: 'INICIAL',
          monto: montoInicial,
          fecha: formData.fechaVenta,
          archivo: null,
          nombreArchivo: '',
          descripcion: 'Pago inicial'
        })
      }

      // Si hay cuotas personalizadas, generar comprobantes solo para cuotas vencidas o del d√≠a actual
      if (modoCuotasPersonalizadas && cuotasPersonalizadas.length > 0) {
        let cuotasVencidas = 0
        cuotasPersonalizadas.forEach((cuota, index) => {
          if (cuota.monto > 0) {
            const fechaCuota = new Date(cuota.fecha)
            fechaCuota.setHours(0, 0, 0, 0) // Normalizar a inicio del d√≠a
            
            // Solo generar comprobante si la cuota ya venci√≥ o es del d√≠a actual
            if (fechaCuota <= fechaActual) {
              nuevosComprobantes.push({
                id: `comp-cuota-${index}-${Date.now()}`,
                tipo: 'CUOTA',
                monto: cuota.monto,
                fecha: cuota.fecha,
                archivo: null,
                nombreArchivo: '',
                descripcion: `Cuota ${index + 1}`
              })
              cuotasVencidas++
            }
          }
        })

        // Si no hay cuotas vencidas, mostrar mensaje informativo
        if (cuotasVencidas === 0 && montoInicial === 0) {
          toast({
            title: 'Sin comprobantes para generar',
            description: 'No hay pagos iniciales ni cuotas vencidas. Los comprobantes se generar√°n autom√°ticamente cuando las cuotas venzan.',
            variant: 'default'
          })
          return
        } else if (cuotasVencidas > 0) {
          toast({
            title: 'Comprobantes generados',
            description: `Se generaron comprobantes para ${cuotasVencidas} cuota(s) vencida(s)`,
            variant: 'default'
          })
        }
      }

      // Si no hay comprobantes para generar, mostrar mensaje
      if (nuevosComprobantes.length === 0) {
        toast({
          title: 'Sin comprobantes para generar',
          description: 'No hay pagos iniciales ni cuotas vencidas que requieran comprobantes',
          variant: 'default'
        })
        return
      }
    }

    setComprobantesPago(nuevosComprobantes)
    
    if (nuevosComprobantes.length > 0) {
      toast({
        title: 'Comprobantes generados',
        description: `Se generaron ${nuevosComprobantes.length} comprobante(s) autom√°ticamente`,
        variant: 'default'
      })
    }
  }

  const formatCurrency = (amount: number) => {
    return new Intl.NumberFormat('es-PE', {
      style: 'currency',
      currency: 'PEN'
    }).format(amount)
  }

  // Funci√≥n para calcular las fechas de las cuotas regulares
  const calcularFechasCuotasRegulares = () => {
    if (!formData.fechaPrimeraCuota || !formData.numeroCuotas || !formData.frecuenciaCuota) {
      return []
    }

    const fechaInicial = new Date(formData.fechaPrimeraCuota)
    const numeroCuotas = parseInt(formData.numeroCuotas) || 0
    const fechas = []

    for (let i = 0; i < numeroCuotas; i++) {
      const fecha = new Date(fechaInicial)
      
      switch (formData.frecuenciaCuota) {
        case 'MENSUAL':
          fecha.setMonth(fecha.getMonth() + i)
          break
        case 'BIMESTRAL':
          fecha.setMonth(fecha.getMonth() + (i * 2))
          break
        case 'TRIMESTRAL':
          fecha.setMonth(fecha.getMonth() + (i * 3))
          break
        case 'SEMESTRAL':
          fecha.setMonth(fecha.getMonth() + (i * 6))
          break
        case 'ANUAL':
          fecha.setFullYear(fecha.getFullYear() + i)
          break
        case 'QUINCENAL':
          fecha.setDate(fecha.getDate() + (i * 15))
          break
        case 'SEMANAL':
          fecha.setDate(fecha.getDate() + (i * 7))
          break
        default:
          fecha.setMonth(fecha.getMonth() + i)
      }
      
      fechas.push(fecha.toISOString().split('T')[0])
    }

    return fechas
  }

  // Funci√≥n para calcular los montos de las cuotas regulares
  const calcularMontosCuotasRegulares = () => {
    const saldoFinanciar = parseFloat(formData.saldoPendiente) || 0
    const numeroCuotas = parseInt(formData.numeroCuotas) || 1
    
    // Si hay intereses aplicados, usar amortizaci√≥n
    if (formData.aplicarIntereses && parseFloat(formData.tasaInteresAnual) > 0) {
      const tasaInteresAnual = parseFloat(formData.tasaInteresAnual)
      
      // Calcular la tasa de inter√©s seg√∫n la frecuencia
      let tasaInteresPorPeriodo = 0
      let periodosPorAno = 12 // Por defecto mensual
      
      switch (formData.frecuenciaCuota) {
        case 'MENSUAL':
          periodosPorAno = 12
          break
        case 'BIMESTRAL':
          periodosPorAno = 6
          break
        case 'TRIMESTRAL':
          periodosPorAno = 4
          break
        case 'SEMESTRAL':
          periodosPorAno = 2
          break
        case 'ANUAL':
          periodosPorAno = 1
          break
        case 'QUINCENAL':
          periodosPorAno = 24
          break
        case 'SEMANAL':
          periodosPorAno = 52
          break
        default:
          periodosPorAno = 12
      }
      
      tasaInteresPorPeriodo = tasaInteresAnual / periodosPorAno / 100
      
      // F√≥rmula de amortizaci√≥n francesa
      const cuotaPeriodo = saldoFinanciar * (tasaInteresPorPeriodo * Math.pow(1 + tasaInteresPorPeriodo, numeroCuotas)) / (Math.pow(1 + tasaInteresPorPeriodo, numeroCuotas) - 1)
      
      const montos = []
      let saldoRestante = saldoFinanciar
      
      for (let i = 0; i < numeroCuotas; i++) {
        const interes = saldoRestante * tasaInteresPorPeriodo
        const capital = cuotaPeriodo - interes
        saldoRestante -= capital
        
        // Para la √∫ltima cuota, ajustar para que no quede saldo residual
        if (i === numeroCuotas - 1) {
          montos.push(Math.round((cuotaPeriodo + saldoRestante) * 100) / 100)
        } else {
          montos.push(Math.round(cuotaPeriodo * 100) / 100)
        }
      }
      
      return montos
    } else {
      // C√°lculo sin intereses (m√©todo anterior)
      const montoCuotaDecimal = saldoFinanciar / numeroCuotas
      const cuotaEntera = Math.floor(montoCuotaDecimal)
      const diferencia = saldoFinanciar - (cuotaEntera * numeroCuotas)
      
      const montos = []
      
      for (let i = 0; i < numeroCuotas; i++) {
        if (i === numeroCuotas - 1 && diferencia > 0) {
          // √öltima cuota con el resto
          montos.push(cuotaEntera + diferencia)
        } else {
          montos.push(cuotaEntera)
        }
      }
      
      return montos
    }
  }

  // Funci√≥n para calcular intereses en cuotas personalizadas
  const calcularInteresesCuotasPersonalizadas = () => {
    if (!formData.aplicarIntereses || !parseFloat(formData.tasaInteresAnual) || cuotasPersonalizadas.length === 0) {
      return cuotasPersonalizadas
    }

    const tasaInteresAnual = parseFloat(formData.tasaInteresAnual)
    const saldoPendiente = parseFloat(formData.saldoPendiente) || 0
    
    // Calcular la tasa de inter√©s por d√≠a
    const tasaInteresDiaria = tasaInteresAnual / 365 / 100
    
    const cuotasConIntereses = []
    let saldoRestante = saldoPendiente
    
    // Ordenar cuotas por fecha para calcular intereses cronol√≥gicamente
    const cuotasOrdenadas = [...cuotasPersonalizadas].sort((a, b) => 
      new Date(a.fecha).getTime() - new Date(b.fecha).getTime()
    )
    
    // Usar la fecha actual como fecha inicial (m√°s realista para el c√°lculo de intereses)
    const fechaInicial = new Date()
    
    for (let i = 0; i < cuotasOrdenadas.length; i++) {
      const cuota = cuotasOrdenadas[i]
      const fechaCuota = new Date(cuota.fecha)
      
      // Validar que la fecha sea v√°lida
      if (isNaN(fechaCuota.getTime())) {
        console.error(`Fecha inv√°lida en cuota ${i + 1}:`, cuota.fecha)
        continue
      }
      
      // Calcular d√≠as desde la fecha actual hasta esta cuota
      const diasTranscurridos = Math.floor((fechaCuota.getTime() - fechaInicial.getTime()) / (1000 * 60 * 60 * 24))
      
      // Validar que los d√≠as no sean negativos (fecha en el pasado)
      if (diasTranscurridos < 0) {
        console.warn(`Cuota ${i + 1} tiene fecha en el pasado:`, cuota.fecha)
      }
      
      // Calcular intereses sobre el saldo restante (NO sobre el monto de la cuota)
      const intereses = Math.max(0, saldoRestante * tasaInteresDiaria * diasTranscurridos)
      
      // El monto con intereses es el monto original m√°s los intereses
      const montoConIntereses = Math.max(0, cuota.monto + intereses)
      
      cuotasConIntereses.push({
        ...cuota,
        monto: Math.round(montoConIntereses * 100) / 100,
        intereses: Math.round(intereses * 100) / 100
      })
      
      // Actualizar saldo restante (restando el monto original, no el monto con intereses)
      saldoRestante -= cuota.monto
    }
    
    return cuotasConIntereses
  }

  // Actualizar precio de venta cuando cambie el descuento
  useEffect(() => {
    if (formData.precioOriginal && formData.montoDescuento) {
      const precioOriginal = parseFloat(formData.precioOriginal) || 0
      const descuento = parseFloat(formData.montoDescuento) || 0
      const precioVenta = Math.max(0, precioOriginal - descuento)
      
      setFormData(prev => ({
        ...prev,
        precioVenta: precioVenta.toFixed(2)
      }))
    }
  }, [formData.precioOriginal, formData.montoDescuento])

  // Calcular saldo pendiente autom√°ticamente
  useEffect(() => {
    if (formData.precioVenta && formData.montoInicial) {
      const precioVenta = parseFloat(formData.precioVenta) || 0
      const montoInicial = parseFloat(formData.montoInicial) || 0
      const saldoPendiente = Math.max(0, precioVenta - montoInicial)

      setFormData(prev => ({
        ...prev,
        saldoPendiente: saldoPendiente.toFixed(2)
      }))
    }
  }, [formData.precioVenta, formData.montoInicial])

  // Sincronizar estados de cuotas personalizadas
  useEffect(() => {
    if (formData.cuotasPersonalizadas) {
      // Cuando se activan las cuotas personalizadas, sincronizar el estado local
      setModoCuotasPersonalizadas(true)
    } else {
      // Cuando se desactivan, limpiar ambos estados
      setModoCuotasPersonalizadas(false)
      setCuotasPersonalizadas([])
      setFormData(prev => ({
        ...prev,
        cuotasPersonalizadasList: []
      }))
    }
  }, [formData.cuotasPersonalizadas])

  // Generar cuotas autom√°ticamente cuando cambien los campos relevantes
  useEffect(() => {
    // No generar cuotas autom√°ticamente si est√°n activadas las cuotas personalizadas
    if (formData.cuotasPersonalizadas) {
      setCuotasGeneradas([])
      setGenerandoCuotas(false)
      return
    }

    if (formData.tipoVenta === 'CUOTAS' && 
        formData.fechaPrimeraCuota && 
        formData.numeroCuotas && 
        formData.frecuenciaCuota && 
        formData.saldoPendiente) {
      
      setGenerandoCuotas(true)
      
      // Peque√±o delay para mostrar el estado de carga
      setTimeout(() => {
        const numeroCuotas = parseInt(formData.numeroCuotas)
        const saldoFinanciar = parseFloat(formData.saldoPendiente) || 0
        
        if (numeroCuotas <= 0 || saldoFinanciar <= 0) {
          setGenerandoCuotas(false)
          return
        }

        const montoCuota = saldoFinanciar / numeroCuotas
        const fechaInicial = new Date(formData.fechaPrimeraCuota)
        
        // Calcular fechas de vencimiento seg√∫n la frecuencia
        const fechasVencimiento = []
        for (let i = 0; i < numeroCuotas; i++) {
          const fechaVencimiento = new Date(fechaInicial)
          
          switch (formData.frecuenciaCuota) {
            case 'MENSUAL':
              fechaVencimiento.setMonth(fechaVencimiento.getMonth() + i)
              break
            case 'BIMESTRAL':
              fechaVencimiento.setMonth(fechaVencimiento.getMonth() + (i * 2))
              break
            case 'TRIMESTRAL':
              fechaVencimiento.setMonth(fechaVencimiento.getMonth() + (i * 3))
              break
            case 'SEMESTRAL':
              fechaVencimiento.setMonth(fechaVencimiento.getMonth() + (i * 6))
              break
            case 'ANUAL':
              fechaVencimiento.setFullYear(fechaVencimiento.getFullYear() + i)
              break
            default:
              fechaVencimiento.setMonth(fechaVencimiento.getMonth() + i)
          }
          
          fechasVencimiento.push(fechaVencimiento)
        }

        // Crear array de cuotas
        const cuotasGeneradas = fechasVencimiento.map((fecha, index) => ({
          numeroCuota: index + 1,
          monto: Math.round(montoCuota * 100) / 100, // Redondear a 2 decimales
          fechaVencimiento: fecha,
          estado: 'PENDIENTE',
          montoPagado: 0,
          montoCapital: Math.round(montoCuota * 100) / 100,
          montoInteres: 0,
          saldoCapitalAnterior: Math.round((saldoFinanciar - (index * montoCuota)) * 100) / 100,
          saldoCapitalPosterior: Math.round((saldoFinanciar - ((index + 1) * montoCuota)) * 100) / 100
        }))

        // Guardar las cuotas generadas en el estado
        setCuotasGeneradas(cuotasGeneradas)
        
        // Actualizar el monto de cuota en el formulario
        setFormData(prev => ({
          ...prev,
          montoCuota: montoCuota.toFixed(2)
        }))

        setGenerandoCuotas(false)
        console.log('‚úÖ Cuotas generadas autom√°ticamente:', cuotasGeneradas)
      }, 500)
    } else {
      // Limpiar cuotas si no se cumplen las condiciones
      setCuotasGeneradas([])
      setGenerandoCuotas(false)
    }
  }, [formData.fechaPrimeraCuota, formData.numeroCuotas, formData.frecuenciaCuota, formData.saldoPendiente, formData.tipoVenta, formData.cuotasPersonalizadas])

  return (
    <>
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="max-w-7xl max-h-[95vh] flex flex-col p-0 bg-gray-50">
          {/* Header compacto y elegante */}
          <div className="sticky top-0 bg-white z-20 border-b border-gray-200 shadow-sm">
            <div className="px-6 py-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="h-10 w-10 rounded-full bg-gradient-to-br from-green-500 to-emerald-600 flex items-center justify-center">
                    <DollarSign className="h-5 w-5 text-white" />
                  </div>
                  <div>
                    <DialogTitle className="text-xl font-bold text-gray-900">
                      Nueva Venta - {tipoVenta === 'LOTE' ? 'Lote' : 'Unidad de Cementerio'}
                    </DialogTitle>
                    <p className="text-sm text-gray-600 mt-1">
                      Complete el formulario paso a paso para registrar la venta
                    </p>
                  </div>
                </div>
                
                {/* Indicador de progreso compacto */}
                {(() => {
                  const progress = getFormProgress()
                  return (
                    <div className="flex items-center gap-4">
                      <div className="text-right">
                        <div className="text-sm font-semibold text-gray-900">
                          {progress.porcentaje}% Completado
                        </div>
                        <div className="text-xs text-gray-500">
                          {progress.camposCompletados} de {progress.totalCampos} campos
                        </div>
                      </div>
                      <div className="w-24 bg-gray-200 rounded-full h-2">
                        <div 
                          className={`h-2 rounded-full transition-all duration-500 ${
                            progress.porcentaje === 100 ? 'bg-gradient-to-r from-green-500 to-emerald-600' : 'bg-gradient-to-r from-blue-500 to-purple-600'
                          }`}
                          style={{ width: `${progress.porcentaje}%` }}
                        />
                      </div>
                    </div>
                  )
                })()}
              </div>
            </div>
          </div>

          {/* Contenido principal con layout de dos columnas */}
          <div className="flex-1 flex overflow-hidden">
            {/* Sidebar con pesta√±as verticales */}
            <div className="w-64 bg-white border-r border-gray-200 flex-shrink-0">
              <div className="p-4">
                <h3 className="text-sm font-semibold text-gray-700 mb-3 uppercase tracking-wide">
                  Pasos del Formulario
                </h3>
              </div>
              
              <nav className="px-2">
                <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full" orientation="vertical">
                  <TabsList className="flex flex-col w-full h-auto bg-transparent border-0 p-0 space-y-1">
                    <TabsTrigger 
                      value="informacion" 
                      className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-blue-50 hover:text-blue-700 data-[state=active]:bg-blue-100 data-[state=active]:text-blue-700 data-[state=active]:border-l-4 data-[state=active]:border-l-blue-600 transition-all duration-200"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                          <Building2 className="h-4 w-4 text-blue-600" />
                        </div>
                        <div className="text-left">
                          <div className="font-medium">Informaci√≥n</div>
                          <div className="text-xs text-gray-500">Unidad y detalles</div>
                        </div>
                      </div>
                    </TabsTrigger>

                    <TabsTrigger 
                      value="clientes" 
                      className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-purple-50 hover:text-purple-700 data-[state=active]:bg-purple-100 data-[state=active]:text-purple-700 data-[state=active]:border-l-4 data-[state=active]:border-l-purple-600 transition-all duration-200"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center">
                          <Users className="h-4 w-4 text-purple-600" />
                        </div>
                        <div className="text-left">
                          <div className="font-medium">Clientes</div>
                          <div className="text-xs text-gray-500">Compradores</div>
                        </div>
                      </div>
                    </TabsTrigger>

                    <TabsTrigger 
                      value="financiero" 
                      className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-orange-50 hover:text-orange-700 data-[state=active]:bg-orange-100 data-[state=active]:text-orange-700 data-[state=active]:border-l-4 data-[state=active]:border-l-orange-600 transition-all duration-200"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded-full bg-orange-100 flex items-center justify-center">
                          <Calculator className="h-4 w-4 text-orange-600" />
                        </div>
                        <div className="text-left">
                          <div className="font-medium">Financiero</div>
                          <div className="text-xs text-gray-500">Precios y pagos</div>
                        </div>
                      </div>
                    </TabsTrigger>

                    {formData.tipoVenta === 'CUOTAS' && (
                      <TabsTrigger 
                        value="cuotas" 
                        className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-green-50 hover:text-green-700 data-[state=active]:bg-green-100 data-[state=active]:text-green-700 data-[state=active]:border-l-4 data-[state=active]:border-l-green-600 transition-all duration-200"
                      >
                        <div className="flex items-center gap-3">
                          <div className="h-8 w-8 rounded-full bg-green-100 flex items-center justify-center">
                            <CreditCard className="h-4 w-4 text-green-600" />
                          </div>
                          <div className="text-left">
                            <div className="font-medium">Cuotas</div>
                            <div className="text-xs text-gray-500">Plan de pagos</div>
                          </div>
                        </div>
                      </TabsTrigger>
                    )}

                    <TabsTrigger 
                      value="comprobantes" 
                      className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-emerald-50 hover:text-emerald-700 data-[state=active]:bg-emerald-100 data-[state=active]:text-emerald-700 data-[state=active]:border-l-4 data-[state=active]:border-l-emerald-600 transition-all duration-200"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded-full bg-emerald-100 flex items-center justify-center">
                          <FileText className="h-4 w-4 text-emerald-600" />
                        </div>
                        <div className="text-left">
                          <div className="font-medium">Comprobantes</div>
                          <div className="text-xs text-gray-500">Pagos realizados</div>
                        </div>
                      </div>
                    </TabsTrigger>

                    <TabsTrigger 
                      value="documentacion" 
                      className="w-full justify-start px-4 py-3 text-left rounded-lg border-0 bg-transparent hover:bg-indigo-50 hover:text-indigo-700 data-[state=active]:bg-indigo-100 data-[state=active]:text-indigo-700 data-[state=active]:border-l-4 data-[state=active]:border-l-indigo-600 transition-all duration-200"
                    >
                      <div className="flex items-center gap-3">
                        <div className="h-8 w-8 rounded-full bg-indigo-100 flex items-center justify-center">
                          <FileText className="h-4 w-4 text-indigo-600" />
                        </div>
                        <div className="text-left">
                          <div className="font-medium">Documentaci√≥n</div>
                          <div className="text-xs text-gray-500">Contratos y archivos</div>
                        </div>
                      </div>
                    </TabsTrigger>
                  </TabsList>
                </Tabs>
              </nav>
            </div>

            {/* Contenido principal con scroll */}
            <div className="flex-1 overflow-y-auto bg-gray-50">
              <div className="p-6 pb-32">
                <form onSubmit={handleSubmit} className="space-y-6">
                  <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
                    {/* Tab: Informaci√≥n General */}
                    <TabsContent value="informacion" className="space-y-6 mt-0">
                      <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
                        {/* Columna 1: Selecci√≥n de unidad */}
                        <div className="space-y-6">
                          <Card className="border-0 shadow-sm bg-white">
                            <CardHeader className="pb-4">
                              <CardTitle className="flex items-center gap-2 text-lg">
                                <div className="h-6 w-6 rounded-full bg-blue-100 flex items-center justify-center text-blue-600 font-bold text-sm">1</div>
                                Selecci√≥n de Unidad
                              </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                              {/* Si tenemos proyectoId, mostrar informaci√≥n del proyecto */}
                              {proyectoId ? (
                                <div className="space-y-4">
                                  <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                                    <div className="flex items-center gap-3">
                                      <div className="h-8 w-8 rounded-full bg-blue-100 flex items-center justify-center">
                                        <Building2 className="h-4 w-4 text-blue-600" />
                                      </div>
                                      <div>
                                        <div className="text-sm font-medium text-blue-900">Proyecto Actual</div>
                                        <div className="text-lg font-bold text-blue-700">
                                          {manzanasPabellones.length > 0 
                                            ? manzanasPabellones[0]?.proyecto?.nombre || 'Proyecto'
                                            : 'Cargando...'
                                          }
                                        </div>
                                        {manzanasPabellones.length > 0 && (
                                          <div className="text-sm text-blue-600">
                                            {manzanasPabellones.length === 1 
                                              ? `Manzana: ${manzanasPabellones[0]?.nombre}`
                                              : `${manzanasPabellones.length} manzanas disponibles`
                                            }
                                          </div>
                                        )}
                                      </div>
                                    </div>
                                  </div>
                                  
                                  {/* Si hay m√∫ltiples manzanas, mostrar selector */}
                                  {manzanasPabellones.length > 1 && (
                                    <div className="space-y-2">
                                      <Label className="text-sm font-medium text-gray-700">
                                        Seleccionar Manzana
                                      </Label>
                                      <Select 
                                        value={manzanaPabellonSeleccionado} 
                                        onValueChange={(value) => {
                                          setManzanaPabellonSeleccionado(value)
                                          setFormData(prev => ({ ...prev, manzanaId: value }))
                                        }}
                                      >
                                        <SelectTrigger className="w-full">
                                          <SelectValue placeholder="Selecciona la manzana" />
                                        </SelectTrigger>
                                        <SelectContent>
                                          {manzanasPabellones.map((mp) => (
                                            <SelectItem key={mp.id} value={mp.id}>
                                              {mp.nombre}
                                            </SelectItem>
                                          ))}
                                        </SelectContent>
                                      </Select>
                                    </div>
                                  )}
                                </div>
                              ) : (
                                /* Selector de manzana/pabell√≥n para casos sin proyectoId */
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Manzana / Pabell√≥n
                                  </Label>
                                  <Select value={formData.manzanaId} onValueChange={(value) => setFormData({...formData, manzanaId: value})}>
                                    <SelectTrigger className="w-full">
                                      <SelectValue placeholder="Selecciona la manzana" />
                                    </SelectTrigger>
                                    <SelectContent>
                                      {unidades.map((unidad) => (
                                        <SelectItem key={unidad.id} value={unidad.id}>
                                          {unidad.manzana?.nombre || unidad.pabellon?.nombre}
                                        </SelectItem>
                                      ))}
                                    </SelectContent>
                                  </Select>
                                </div>
                              )}

                              {/* Selector de unidad espec√≠fica */}
                              <div className="space-y-2">
                                <Label className="text-sm font-medium text-gray-700">
                                  Unidad
                                </Label>
                                <Select value={formData.unidadId} onValueChange={(value) => {
                                  // Encontrar la unidad seleccionada
                                  const unidadSeleccionada = unidadesDisponibles.find(u => u.id === value) || 
                                                           unidades.find(u => u.id === value)
                                  
                                  if (unidadSeleccionada) {
                                    // Establecer la unidad seleccionada
                                    setSelectedUnidad(unidadSeleccionada)
                                    
                                    // Establecer el precio original y calcular el precio de venta
                                    const precioOriginal = unidadSeleccionada.precio
                                    const descuento = parseFloat(formData.montoDescuento) || 0
                                    const precioVenta = Math.max(0, precioOriginal - descuento)
                                    
                                    setFormData({
                                      ...formData,
                                      unidadId: value,
                                      precioOriginal: precioOriginal.toString(),
                                      precioVenta: precioVenta.toFixed(2)
                                    })
                                  } else {
                                    setFormData({...formData, unidadId: value})
                                  }
                                }}>
                                  <SelectTrigger className="w-full">
                                    <SelectValue placeholder="Selecciona la unidad" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {unidadesDisponibles.length > 0 ? (
                                      unidadesDisponibles.map((unidad) => (
                                        <SelectItem key={unidad.id} value={unidad.id}>
                                          <div className="flex items-center justify-between w-full">
                                            <span>{unidad.codigo}</span>
                                            <span className="text-gray-500 ml-4">
                                              {formatCurrency(unidad.precio)}
                                            </span>
                                          </div>
                                        </SelectItem>
                                      ))
                                    ) : (
                                      unidades.map((unidad) => (
                                        <SelectItem key={unidad.id} value={unidad.id}>
                                          <div className="flex items-center justify-between w-full">
                                            <span>{unidad.codigo}</span>
                                            <span className="text-gray-500 ml-4">
                                              {formatCurrency(unidad.precio)}
                                            </span>
                                          </div>
                                        </SelectItem>
                                      ))
                                    )}
                                  </SelectContent>
                                </Select>
                              </div>

                              {/* Agente de ventas */}
                              <div className="space-y-2">
                                <Label className="text-sm font-medium text-gray-700">
                                  Agente de Ventas
                                </Label>
                                <Select value={formData.vendedorId} onValueChange={(value) => setFormData({...formData, vendedorId: value})}>
                                  <SelectTrigger className="w-full">
                                    <SelectValue placeholder="Selecciona el agente" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {vendedores.map((vendedor) => (
                                      <SelectItem key={vendedor.id} value={vendedor.id}>
                                        {vendedor.nombre} {vendedor.apellido}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              </div>
                            </CardContent>
                          </Card>
                        </div>

                        {/* Columna 2: Unidad seleccionada */}
                        <div className="space-y-6">
                          <Card className="border-0 shadow-sm bg-white">
                            <CardHeader className="pb-4">
                              <CardTitle className="flex items-center gap-2 text-lg">
                                <div className="h-6 w-6 rounded-full bg-green-100 flex items-center justify-center text-green-600 font-bold text-sm">2</div>
                                Unidad Seleccionada
                              </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                              {selectedUnidad ? (
                                <div className="space-y-3">
                                  <div className="p-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg border border-blue-200">
                                    <div className="flex items-center justify-between">
                                      <div>
                                        <div className="text-sm font-medium text-blue-900">C√≥digo</div>
                                        <div className="text-lg font-bold text-blue-700">{selectedUnidad.codigo}</div>
                                      </div>
                                      <div className="text-right">
                                        <div className="text-sm font-medium text-blue-900">Precio</div>
                                        <div className="text-lg font-bold text-blue-700">{formatCurrency(selectedUnidad.precio)}</div>
                                      </div>
                                    </div>
                                    <div className="mt-3 pt-3 border-t border-blue-200">
                                      <div className="flex items-center justify-between">
                                        <div>
                                          <div className="text-sm font-medium text-blue-900">Estado</div>
                                          <div className="text-sm text-blue-700">{selectedUnidad.estado}</div>
                                        </div>
                                        <div className="text-right">
                                          <div className="text-sm font-medium text-blue-900">Ubicaci√≥n</div>
                                          <div className="text-sm text-blue-700">
                                            {selectedUnidad.manzana?.proyecto?.nombre || selectedUnidad.pabellon?.proyecto?.nombre} - {selectedUnidad.manzana?.nombre || selectedUnidad.pabellon?.nombre}
                                          </div>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              ) : (
                                <div className="p-8 text-center text-gray-500">
                                  <Building2 className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                                  <p className="text-sm">Selecciona una unidad para ver los detalles</p>
                                </div>
                              )}
                            </CardContent>
                          </Card>
                        </div>

                        {/* Columna 3: Informaci√≥n de venta */}
                        <div className="space-y-6">
                          <Card className="border-0 shadow-sm bg-white">
                            <CardHeader className="pb-4">
                              <CardTitle className="flex items-center gap-2 text-lg">
                                <div className="h-6 w-6 rounded-full bg-purple-100 flex items-center justify-center text-purple-600 font-bold text-sm">3</div>
                                Informaci√≥n de Venta
                              </CardTitle>
                            </CardHeader>
                            <CardContent className="space-y-4">
                              <div className="grid grid-cols-1 gap-4">
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Fecha de Venta *
                                  </Label>
                                  <Input
                                    type="date"
                                    value={formData.fechaVenta}
                                    onChange={(e) => setFormData({...formData, fechaVenta: e.target.value})}
                                    className="w-full"
                                    required
                                  />
                                </div>

                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Fecha de Entrega
                                  </Label>
                                  <Input
                                    type="date"
                                    value={formData.fechaEntrega}
                                    onChange={(e) => setFormData({...formData, fechaEntrega: e.target.value})}
                                    className="w-full"
                                  />
                                </div>
                              </div>
                            </CardContent>
                          </Card>
                        </div>
                      </div>
                    </TabsContent>

                    {/* Tab: Clientes */}
                    <TabsContent value="clientes" className="space-y-6 mt-0">
                      <Card className="border-0 shadow-sm bg-white">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-lg">
                            <Users className="h-5 w-5 text-purple-600" />
                            Gesti√≥n de Clientes
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-6">
                          {/* Lista de clientes agregados */}
                          {formData.clientes.length > 0 && (
                            <div className="space-y-3">
                              <h4 className="text-sm font-medium text-gray-700">Clientes Agregados</h4>
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                                {formData.clientes.map((clienteId) => {
                                  const cliente = clientes.find(c => c.id === clienteId)
                                  return cliente ? (
                                    <div key={clienteId} className="flex items-center justify-between p-3 bg-purple-50 border border-purple-200 rounded-lg">
                                      <div className="flex items-center gap-3">
                                        <div className="h-8 w-8 rounded-full bg-purple-100 flex items-center justify-center">
                                          <User className="h-4 w-4 text-purple-600" />
                                        </div>
                                        <div>
                                          <div className="font-medium text-gray-900">
                                            {cliente.nombre} {cliente.apellido}
                                          </div>
                                          <div className="text-sm text-gray-600">{cliente.email}</div>
                                        </div>
                                      </div>
                                      <Button
                                        type="button"
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => removerCliente(clienteId)}
                                        className="text-red-600 hover:text-red-700 hover:bg-red-50"
                                      >
                                        <X className="h-4 w-4" />
                                      </Button>
                                    </div>
                                  ) : null
                                })}
                              </div>
                            </div>
                          )}

                          {/* Agregar nuevo cliente */}
                          <div className="border-t pt-6">
                            <h4 className="text-sm font-medium text-gray-700 mb-4">Agregar Cliente</h4>
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                              <Select value={formData.clienteId} onValueChange={(value) => setFormData({...formData, clienteId: value})}>
                                <SelectTrigger>
                                  <SelectValue placeholder="Selecciona un cliente existente" />
                                </SelectTrigger>
                                <SelectContent>
                                  {clientes.map((cliente) => (
                                    <SelectItem key={cliente.id} value={cliente.id}>
                                      {cliente.nombre} {cliente.apellido} - {cliente.email}
                                    </SelectItem>
                                  ))}
                                </SelectContent>
                              </Select>
                              <Button
                                type="button"
                                onClick={agregarCliente}
                                disabled={!formData.clienteId}
                                className="bg-purple-600 hover:bg-purple-700"
                              >
                                <Plus className="h-4 w-4 mr-2" />
                                Agregar Cliente
                              </Button>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    {/* Tab: Financiero */}
                    <TabsContent value="financiero" className="space-y-6 mt-0">
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        {/* Configuraci√≥n de precios */}
                        <Card className="border-0 shadow-sm bg-white">
                          <CardHeader>
                            <CardTitle className="flex items-center gap-2 text-lg">
                              <DollarSign className="h-5 w-5 text-orange-600" />
                              Configuraci√≥n de Precios
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Precio Original
                              </Label>
                              <Input
                                type="number"
                                placeholder="0.00"
                                value={formData.precioOriginal}
                                readOnly
                                className="w-full bg-gray-50 cursor-not-allowed"
                              />
                              <p className="text-xs text-gray-500">Precio fijo de la unidad seleccionada</p>
                            </div>

                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Descuento
                              </Label>
                              <Input
                                type="number"
                                placeholder="0.00"
                                value={formData.montoDescuento}
                                onChange={(e) => {
                                  const descuento = parseFloat(e.target.value) || 0
                                  const precioOriginal = parseFloat(formData.precioOriginal) || 0
                                  const precioVenta = Math.max(0, precioOriginal - descuento)
                                  
                                  setFormData({
                                    ...formData,
                                    montoDescuento: e.target.value,
                                    precioVenta: precioVenta.toFixed(2)
                                  })
                                }}
                                className="w-full"
                              />
                              <p className="text-xs text-gray-500">Monto del descuento a aplicar</p>
                            </div>

                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Motivo del Descuento
                              </Label>
                              <Input
                                type="text"
                                placeholder="Ej: Cliente frecuente, Promoci√≥n especial, etc."
                                value={formData.motivoDescuento}
                                onChange={(e) => setFormData({...formData, motivoDescuento: e.target.value})}
                                className="w-full"
                              />
                              <p className="text-xs text-gray-500">Raz√≥n por la cual se aplica el descuento</p>
                            </div>

                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Precio de Venta
                              </Label>
                              <Input
                                type="number"
                                placeholder="0.00"
                                value={formData.precioVenta}
                                readOnly
                                className="w-full bg-gray-50 cursor-not-allowed"
                              />
                              <p className="text-xs text-gray-500">Precio final despu√©s del descuento</p>
                            </div>
                          </CardContent>
                        </Card>

                        {/* Configuraci√≥n de pagos */}
                        <Card className="border-0 shadow-sm bg-white">
                          <CardHeader>
                            <CardTitle className="flex items-center gap-2 text-lg">
                              <CreditCard className="h-5 w-5 text-orange-600" />
                              Configuraci√≥n de Pagos
                            </CardTitle>
                          </CardHeader>
                          <CardContent className="space-y-4">
                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Tipo de Venta
                              </Label>
                              <Select value={formData.tipoVenta} onValueChange={(value) => setFormData({...formData, tipoVenta: value})}>
                                <SelectTrigger className="w-full">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="CONTADO">Contado</SelectItem>
                                  <SelectItem value="CUOTAS">Cuotas</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>

                            <div className="space-y-2">
                              <Label className="text-sm font-medium text-gray-700">
                                Forma de Pago
                              </Label>
                              <Select value={formData.formaPago} onValueChange={(value) => setFormData({...formData, formaPago: value})}>
                                <SelectTrigger className="w-full">
                                  <SelectValue />
                                </SelectTrigger>
                                <SelectContent>
                                  <SelectItem value="EFECTIVO">Efectivo</SelectItem>
                                  <SelectItem value="TRANSFERENCIA">Transferencia</SelectItem>
                                  <SelectItem value="CHEQUE">Cheque</SelectItem>
                                  <SelectItem value="TARJETA">Tarjeta</SelectItem>
                                </SelectContent>
                              </Select>
                            </div>


                          </CardContent>
                        </Card>
                      </div>
                    </TabsContent>

                    {/* Tab: Cuotas */}
                    <TabsContent value="cuotas" className="space-y-6 mt-0">
                      {formData.tipoVenta === 'CUOTAS' ? (
                        <div className="space-y-6">
                          {/* Configuraci√≥n de cuotas regulares */}
                          <Card className="border-0 shadow-sm bg-white">
                            <CardHeader>
                              <CardTitle className="flex items-center gap-2 text-lg">
                                <CreditCard className="h-5 w-5 text-green-600" />
                                Configuraci√≥n de Cuotas
                              </CardTitle>
                              <p className="text-sm text-gray-600 mt-2">
                                Las cuotas se generan autom√°ticamente cuando completes todos los campos requeridos
                              </p>
                              
                              {/* Switch para activar cuotas personalizadas */}
                              <div className="flex items-center justify-between mt-4 p-4 bg-gray-50 border border-gray-200 rounded-lg">
                                <div className="space-y-1">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Activar Cuotas Personalizadas
                                  </Label>
                                  <p className="text-xs text-gray-500">
                                    Define fechas y montos espec√≠ficos para cada cuota
                                  </p>
                                </div>
                                <Switch
                                  checked={formData.cuotasPersonalizadas}
                                  onCheckedChange={(checked) => setFormData({...formData, cuotasPersonalizadas: checked})}
                                  className="data-[state=checked]:bg-green-600 data-[state=unchecked]:bg-gray-600"
                                />
                              </div>
                            </CardHeader>
                            <CardContent className="space-y-6">
                              {/* Mensaje informativo cuando se activan las cuotas personalizadas */}
                              {formData.cuotasPersonalizadas && (
                                <div className="p-4 bg-purple-50 border border-purple-200 rounded-lg">
                                  <div className="flex items-start gap-3">
                                    <div className="h-5 w-5 rounded-full bg-purple-100 flex items-center justify-center mt-0.5">
                                      <span className="text-xs font-bold text-purple-600">üí°</span>
                                    </div>
                                    <div className="text-sm text-purple-800">
                                      <p className="font-medium mb-1">Modo Cuotas Personalizadas Activado</p>
                                      <p>Los campos de configuraci√≥n autom√°tica est√°n ocultos. Ahora puedes ingresar cada cuota manualmente con su fecha y monto espec√≠fico.</p>
                                      <p className="mt-2 text-xs">El saldo a financiar se calcula autom√°ticamente: Precio de Venta - Monto Inicial</p>
                                    </div>
                                  </div>
                                </div>
                              )}

                              {/* Campo de monto inicial y saldo a financiar - Siempre visible */}
                              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Monto Inicial
                                  </Label>
                                  <Input
                                    type="number"
                                    value={formData.montoInicial}
                                    onChange={(e) => setFormData(prev => ({ ...prev, montoInicial: e.target.value }))}
                                    placeholder="0.00"
                                    className="w-full"
                                  />
                                  <p className="text-xs text-gray-500">
                                    Pago inicial que se descuenta del precio total
                                  </p>
                                </div>

                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Saldo a Financiar
                                  </Label>
                                  <Input
                                    type="number"
                                    value={formData.saldoPendiente}
                                    placeholder="0.00"
                                    readOnly
                                    className="w-full bg-gray-50"
                                  />
                                  <p className="text-xs text-gray-500">
                                    Precio de venta menos monto inicial
                                  </p>
                                </div>
                              </div>

                              {/* Configuraci√≥n b√°sica de cuotas - Solo mostrar si NO est√°n activadas las cuotas personalizadas */}
                              {!formData.cuotasPersonalizadas && (
                                <>
                                  {/* Configuraci√≥n b√°sica de cuotas */}
                                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                    <div className="space-y-2">
                                      <Label className="text-sm font-medium text-gray-700">
                                        N√∫mero de Cuotas
                                      </Label>
                                      <Input
                                        type="number"
                                        value={formData.numeroCuotas}
                                        onChange={(e) => setFormData(prev => ({ ...prev, numeroCuotas: e.target.value }))}
                                        placeholder="12"
                                        className="w-full"
                                      />
                                      <p className="text-xs text-gray-500">
                                        Cantidad de cuotas para financiar
                                      </p>
                                    </div>

                                    <div className="space-y-2">
                                      <Label className="text-sm font-medium text-gray-700">
                                        Frecuencia de Cuotas
                                      </Label>
                                      <Select value={formData.frecuenciaCuota} onValueChange={(value) => setFormData(prev => ({ ...prev, frecuenciaCuota: value }))}>
                                        <SelectTrigger className="w-full">
                                          <SelectValue />
                                        </SelectTrigger>
                                        <SelectContent>
                                          <SelectItem value="MENSUAL">Mensual</SelectItem>
                                          <SelectItem value="BIMESTRAL">Bimestral</SelectItem>
                                          <SelectItem value="TRIMESTRAL">Trimestral</SelectItem>
                                          <SelectItem value="SEMESTRAL">Semestral</SelectItem>
                                          <SelectItem value="ANUAL">Anual</SelectItem>
                                        </SelectContent>
                                      </Select>
                                      <p className="text-xs text-gray-500">
                                        Intervalo entre cada cuota
                                      </p>
                                    </div>

                                    <div className="space-y-2">
                                      <Label className="text-sm font-medium text-gray-700">
                                        Fecha de Primera Cuota
                                      </Label>
                                      <Input
                                        type="date"
                                        value={formData.fechaPrimeraCuota}
                                        onChange={(e) => setFormData(prev => ({ ...prev, fechaPrimeraCuota: e.target.value }))}
                                        className="w-full"
                                      />
                                      <p className="text-xs text-gray-500">
                                        Fecha desde la cual se calcular√°n las cuotas
                                      </p>
                                    </div>

                                    <div className="space-y-2">
                                      <Label className="text-sm font-medium text-gray-700">
                                        Monto de Cuota
                                      </Label>
                                      <Input
                                        type="number"
                                        value={formData.montoCuota}
                                        placeholder="0.00"
                                        readOnly
                                        className="w-full bg-gray-50"
                                      />
                                      <p className="text-xs text-gray-500">
                                        Cuota calculada autom√°ticamente
                                      </p>
                                    </div>
                                  </div>



                                  {/* Indicador de estado de generaci√≥n de cuotas */}
                                  <div className="col-span-full">
                                    {generandoCuotas ? (
                                      <div className="p-4 bg-yellow-50 border border-yellow-200 rounded-lg">
                                        <div className="flex items-center gap-3">
                                          <div className="h-5 w-5 rounded-full bg-yellow-100 flex items-center justify-center">
                                            <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-yellow-600"></div>
                                          </div>
                                          <div className="text-sm text-yellow-800">
                                            <p className="font-medium">Generando cuotas...</p>
                                            <p>Calculando fechas y montos autom√°ticamente</p>
                                          </div>
                                        </div>
                                      </div>
                                    ) : cuotasGeneradas.length > 0 ? (
                                      <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                                        <div className="flex items-center gap-3">
                                          <div className="h-5 w-5 rounded-full bg-green-100 flex items-center justify-center">
                                            <span className="text-xs font-bold text-green-600">‚úÖ</span>
                                          </div>
                                          <div className="text-sm text-green-800">
                                            <p className="font-medium">Cuotas generadas exitosamente</p>
                                            <p>{cuotasGeneradas.length} cuotas listas para revisar</p>
                                          </div>
                                        </div>
                                      </div>
                                    ) : (
                                      <div className="p-4 bg-gray-50 border border-gray-200 rounded-lg">
                                        <div className="flex items-center gap-3">
                                          <div className="h-5 w-5 rounded-full bg-gray-100 flex items-center justify-center">
                                            <span className="text-xs font-bold text-gray-600">‚è≥</span>
                                          </div>
                                          <div className="text-sm text-gray-700">
                                            <p className="font-medium">Esperando configuraci√≥n</p>
                                            <p>Completa todos los campos para generar las cuotas autom√°ticamente</p>
                                          </div>
                                        </div>
                                      </div>
                                    )}
                                  </div>
                                </>
                              )}



                              {/* Configuraci√≥n de intereses */}
                              <div className="border-t pt-4">
                                <div className="flex items-center justify-between">
                                  <div className="space-y-1">
                                    <Label className="text-sm font-medium text-gray-700">
                                      Aplicar Intereses a las Cuotas
                                    </Label>
                                    <p className="text-xs text-gray-500">
                                      Calcula intereses sobre el saldo pendiente
                                    </p>
                                  </div>
                                  <Switch
                                    checked={formData.aplicarIntereses}
                                    onCheckedChange={(checked) => setFormData({...formData, aplicarIntereses: checked})}
                                    className="data-[state=checked]:bg-green-600 data-[state=unchecked]:bg-gray-600"
                                  />
                                </div>

                                {formData.aplicarIntereses && (
                                  <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-lg">
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                      <div className="space-y-2">
                                        <Label className="text-sm font-medium text-gray-700">
                                          Tasa de Inter√©s Anual (%)
                                        </Label>
                                        <Input
                                          type="number"
                                          value={formData.tasaInteresAnual}
                                          onChange={(e) => setFormData({...formData, tasaInteresAnual: e.target.value})}
                                          placeholder="8.0"
                                          className="w-full"
                                        />
                                      </div>
                                      <div className="space-y-2">
                                        <Label className="text-sm font-medium text-gray-700">
                                          Fecha Primera Cuota
                                        </Label>
                                        <Input
                                          type="date"
                                          value={formData.fechaPrimeraCuota}
                                          onChange={(e) => setFormData({...formData, fechaPrimeraCuota: e.target.value})}
                                          className="w-full"
                                        />
                                      </div>
                                    </div>
                                  </div>
                                )}
                              </div>
                            </CardContent>
                          </Card>

                          {/* Cuotas personalizadas - Solo mostrar cuando est√©n activadas */}
                          {formData.cuotasPersonalizadas && (
                            <Card className="border-0 shadow-sm bg-white">
                              <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-lg">
                                  <Clock className="h-5 w-5 text-green-600" />
                                  Cuotas Personalizadas
                                </CardTitle>
                              </CardHeader>
                              <CardContent className="space-y-4">
                                <div className="space-y-4">
                                  <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                    <div className="flex items-start gap-3">
                                      <div className="h-5 w-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                                        <span className="text-xs font-bold text-blue-600">üí°</span>
                                      </div>
                                      <div className="text-sm text-blue-800">
                                        <p className="font-medium mb-1">Configuraci√≥n de Cuotas Personalizadas</p>
                                        <p>Ingresa el capital de cada cuota. Los intereses se calcular√°n autom√°ticamente seg√∫n la fecha de vencimiento.</p>
                                      </div>
                                    </div>
                                  </div>

                                  {/* Lista de cuotas personalizadas */}
                                  <div className="space-y-3">
                                    {cuotasPersonalizadas.map((cuota, index) => (
                                      <div key={index} className="p-4 border border-gray-200 rounded-lg bg-gray-50">
                                        <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                                          {/* Columna 1: Capital e informaci√≥n financiera */}
                                          <div className="space-y-3">
                                            <div className="space-y-2">
                                              <Label className="text-sm font-medium text-gray-700">
                                                Cuota {index + 1} - Capital
                                              </Label>
                                              <Input
                                                type="number"
                                                value={cuota.monto}
                                                onChange={(e) => actualizarCuotaPersonalizada(index, 'monto', parseFloat(e.target.value) || 0)}
                                                placeholder="0.00"
                                                className="w-full"
                                              />
                                            </div>
                                            
                                            <div className="flex items-center justify-between text-sm">
                                              <span className="text-gray-600">
                                                Total: <span className="font-medium text-blue-600">{formatCurrency(cuota.monto || 0)}</span>
                                              </span>
                                            </div>
                                          </div>

                                          {/* Columna 2: Fecha */}
                                          <div className="space-y-2">
                                            <Label className="text-sm font-medium text-gray-700">
                                              Fecha de Vencimiento
                                            </Label>
                                            <Input
                                              type="date"
                                              value={cuota.fecha}
                                              onChange={(e) => actualizarCuotaPersonalizada(index, 'fecha', e.target.value)}
                                              className="w-full"
                                            />
                                          </div>
                                        </div>

                                        <div className="mt-3 flex justify-end">
                                          <Button
                                            type="button"
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => removerCuotaPersonalizada(index)}
                                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                                          >
                                            <X className="h-4 w-4 mr-1" />
                                            Eliminar
                                          </Button>
                                        </div>
                                      </div>
                                    ))}
                                  </div>

                                  {/* Bot√≥n agregar cuota */}
                                  <div className="pt-2">
                                    <Button
                                      type="button"
                                      onClick={agregarCuotaPersonalizada}
                                      variant="outline"
                                      className="w-full border-dashed border-2 border-gray-300 hover:border-green-400 hover:bg-green-50 text-gray-600 hover:text-green-700"
                                    >
                                      <Plus className="h-4 w-4 mr-2" />
                                      Agregar Cuota
                                    </Button>
                                  </div>

                                  {/* Resumen de cuotas personalizadas */}
                                  <div className="p-4 bg-gray-100 border border-gray-200 rounded-lg">
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                      <div>
                                        <span className="font-medium text-gray-700">Total configurado:</span>
                                        <div className="text-lg font-bold text-green-600">
                                          {formatCurrency(cuotasPersonalizadas.reduce((total, cuota) => total + (cuota.monto || 0), 0))}
                                        </div>
                                      </div>
                                      <div>
                                        <span className="font-medium text-gray-700">Saldo pendiente:</span>
                                        <div className="text-lg font-bold text-blue-600">
                                          {formatCurrency(parseFloat(formData.saldoPendiente) || 0)}
                                        </div>
                                      </div>
                                      <div>
                                        <span className="font-medium text-gray-700">Capital total:</span>
                                        <div className="text-lg font-bold text-purple-600">
                                          {formatCurrency(cuotasPersonalizadas.reduce((total, cuota) => total + (cuota.monto || 0), 0))}
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              )}
                            </CardContent>
                          </Card>

                          {/* Lista de cuotas generadas */}
                          {!formData.cuotasPersonalizadas && cuotasGeneradas.length > 0 && (
                            <Card className="border-0 shadow-sm bg-white">
                              <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-lg">
                                  <TableIcon className="h-5 w-5 text-blue-600" />
                                  Lista de Cuotas Generadas
                                  <Badge variant="secondary" className="ml-2">
                                    {cuotasGeneradas.length} cuotas
                                  </Badge>
                                </CardTitle>
                              </CardHeader>
                              <CardContent>
                                <div className="overflow-x-auto">
                                  <table className="w-full text-sm">
                                    <thead>
                                      <tr className="border-b border-gray-200">
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">#</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Fecha Vencimiento</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Monto</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Capital</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Inter√©s</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Saldo Anterior</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Saldo Posterior</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {cuotasGeneradas.map((cuota, index) => (
                                        <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                                          <td className="py-2 px-3 font-medium text-gray-900">
                                            {cuota.numeroCuota}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {cuota.fechaVencimiento.toLocaleDateString('es-ES', {
                                              year: 'numeric',
                                              month: 'short',
                                              day: 'numeric'
                                            })}
                                          </td>
                                          <td className="py-2 px-3 font-medium text-green-600">
                                            {formatCurrency(cuota.monto)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(cuota.montoCapital)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(cuota.montoInteres)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(cuota.saldoCapitalAnterior)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(cuota.saldoCapitalPosterior)}
                                          </td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
                                </div>
                                
                                <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-lg">
                                  <div className="flex items-start gap-3">
                                    <div className="h-5 w-5 rounded-full bg-blue-100 flex items-center justify-center mt-0.5">
                                      <span className="text-xs font-bold text-blue-600">üíæ</span>
                                    </div>
                                    <div className="text-sm text-blue-800">
                                      <p className="font-medium mb-1">Cuotas Generadas Autom√°ticamente</p>
                                      <p>Estas cuotas se generaron autom√°ticamente bas√°ndose en tu configuraci√≥n y se guardar√°n en la base de datos cuando env√≠es el formulario de venta.</p>
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          )}

                          {/* Lista de cuotas personalizadas */}
                          {formData.cuotasPersonalizadas && cuotasPersonalizadas.length > 0 && (
                            <Card className="border-0 shadow-sm bg-white">
                              <CardHeader>
                                <CardTitle className="flex items-center gap-2 text-lg">
                                  <Clock className="h-5 w-5 text-purple-600" />
                                  Lista de Cuotas Personalizadas
                                  <Badge variant="secondary" className="ml-2">
                                    {cuotasPersonalizadas.length} cuotas
                                  </Badge>
                                </CardTitle>
                              </CardHeader>
                              <CardContent>
                                <div className="overflow-x-auto">
                                  <table className="w-full text-sm">
                                    <thead>
                                      <tr className="border-b border-gray-200">
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">#</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Fecha Vencimiento</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Monto</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Capital</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Inter√©s</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Saldo Anterior</th>
                                        <th className="text-left py-2 px-3 font-medium text-gray-700">Saldo Posterior</th>
                                      </tr>
                                    </thead>
                                    <tbody>
                                      {cuotasPersonalizadas.map((cuota, index) => (
                                        <tr key={index} className="border-b border-gray-100 hover:bg-gray-50">
                                          <td className="py-2 px-3 font-medium text-gray-900">
                                            {index + 1}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {new Date(cuota.fecha).toLocaleDateString('es-ES', {
                                              year: 'numeric',
                                              month: 'short',
                                              day: 'numeric'
                                            })}
                                          </td>
                                          <td className="py-2 px-3 font-medium text-green-600">
                                            {formatCurrency(cuota.monto || 0)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(cuota.monto || 0)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(0)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(0)}
                                          </td>
                                          <td className="py-2 px-3 text-gray-700">
                                            {formatCurrency(0)}
                                          </td>
                                        </tr>
                                      ))}
                                    </tbody>
                                  </table>
                                </div>
                                
                                <div className="mt-4 p-4 bg-purple-50 border border-purple-200 rounded-lg">
                                  <div className="flex items-start gap-3">
                                    <div className="h-5 w-5 rounded-full bg-purple-100 flex items-center justify-center mt-0.5">
                                      <span className="text-xs font-bold text-purple-600">üíæ</span>
                                    </div>
                                    <div className="text-sm text-purple-800">
                                      <p className="font-medium mb-1">Cuotas Personalizadas Configuradas</p>
                                      <p>Estas cuotas se configuraron manualmente con fechas y montos espec√≠ficos y se guardar√°n en la base de datos cuando env√≠es el formulario de venta.</p>
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          )}

                          {/* Indicador de cuotas personalizadas agregadas */}
                          {formData.cuotasPersonalizadas && (
                            <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-3">
                                  <div className="h-5 w-5 rounded-full bg-blue-100 flex items-center justify-center">
                                    <span className="text-xs font-bold text-blue-600">üìä</span>
                                  </div>
                                  <div className="text-sm text-blue-800">
                                    <p className="font-medium">Cuotas Personalizadas</p>
                                    <p>{cuotasPersonalizadas.length} cuota(s) agregada(s)</p>
                                  </div>
                                </div>
                                <Badge variant="secondary" className="ml-2">
                                  {cuotasPersonalizadas.length} cuotas
                                </Badge>
                              </div>
                            </div>
                          )}
                        </div>
                      ) : (
                        <div className="text-center py-12">
                          <CreditCard className="h-16 w-16 mx-auto mb-4 text-gray-300" />
                          <h3 className="text-lg font-medium text-gray-900 mb-2">Cuotas no habilitadas</h3>
                          <p className="text-gray-500 mb-4">
                            Para configurar cuotas, primero selecciona "Cuotas" como tipo de venta en la pesta√±a Financiero.
                          </p>
                          <Button
                            onClick={() => setActiveTab('financiero')}
                            className="bg-blue-600 hover:bg-blue-700"
                          >
                            Ir a Financiero
                          </Button>
                        </div>
                      )}
                    </TabsContent>

                    {/* Tab: Comprobantes */}
                    <TabsContent value="comprobantes" className="space-y-6 mt-0">
                      <Card className="border-0 shadow-sm bg-white">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-lg">
                            <FileText className="h-5 w-5 text-emerald-600" />
                            Comprobantes de Pago
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-6">
                          {/* Generar comprobantes autom√°ticamente */}
                          <div className="p-4 bg-emerald-50 border border-emerald-200 rounded-lg">
                            <div className="flex items-center justify-between">
                              <div className="space-y-1">
                                <h4 className="font-medium text-emerald-900">Generar Comprobantes Autom√°ticamente</h4>
                                <p className="text-sm text-emerald-700">
                                  Crea comprobantes basados en la configuraci√≥n de pagos
                                </p>
                              </div>
                              <Button
                                onClick={generarComprobantesAutomaticos}
                                className="bg-emerald-600 hover:bg-emerald-700"
                              >
                                Generar
                              </Button>
                            </div>
                          </div>

                          {/* Lista de comprobantes */}
                          <div className="space-y-4">
                            <h4 className="text-sm font-medium text-gray-700">Comprobantes Registrados</h4>
                            {formData.comprobantesPago.length > 0 ? (
                              <div className="space-y-3">
                                {formData.comprobantesPago.map((comprobante, index) => (
                                  <div key={comprobante.id} className="p-4 border border-gray-200 rounded-lg bg-gray-50">
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                      <div className="space-y-2">
                                        <Label className="text-sm font-medium text-gray-700">Tipo</Label>
                                        <div className="text-sm text-gray-900">{comprobante.tipo}</div>
                                      </div>
                                      <div className="space-y-2">
                                        <Label className="text-sm font-medium text-gray-700">Monto</Label>
                                        <div className="text-sm font-medium text-gray-900">{formatCurrency(comprobante.monto)}</div>
                                      </div>
                                      <div className="space-y-2">
                                        <Label className="text-sm font-medium text-gray-700">Fecha</Label>
                                        <div className="text-sm text-gray-900">{comprobante.fecha}</div>
                                      </div>
                                    </div>
                                  </div>
                                ))}
                              </div>
                            ) : (
                              <div className="text-center py-8 text-gray-500">
                                <FileText className="h-12 w-12 mx-auto mb-3 text-gray-300" />
                                <p>No hay comprobantes registrados</p>
                              </div>
                            )}
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>

                    {/* Tab: Documentaci√≥n */}
                    <TabsContent value="documentacion" className="space-y-6 mt-0">
                      <Card className="border-0 shadow-sm bg-white">
                        <CardHeader>
                          <CardTitle className="flex items-center gap-2 text-lg">
                            <FileText className="h-5 w-5 text-indigo-600" />
                            Documentaci√≥n de la Venta
                          </CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-6">
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {/* Contrato */}
                            <div className="space-y-4">
                              <h4 className="text-sm font-medium text-gray-700">Contrato de Venta</h4>
                              <div className="space-y-3">
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Archivo del Contrato
                                  </Label>
                                  <Input
                                    type="file"
                                    accept=".pdf,.doc,.docx"
                                    onChange={(e) => {
                                      const file = e.target.files?.[0]
                                      if (file) handleFileUpload('contrato', file)
                                    }}
                                    className="w-full"
                                  />
                                </div>
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Descripci√≥n del Contrato
                                  </Label>
                                  <Textarea
                                    placeholder="Descripci√≥n del contrato..."
                                    rows={3}
                                    className="w-full"
                                  />
                                </div>
                              </div>
                            </div>

                            {/* Otros documentos */}
                            <div className="space-y-4">
                              <h4 className="text-sm font-medium text-gray-700">Otros Documentos</h4>
                              <div className="space-y-3">
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Documentos Adicionales
                                  </Label>
                                  <Input
                                    type="file"
                                    accept=".pdf,.doc,.docx,.jpg,.png"
                                    multiple
                                    className="w-full"
                                  />
                                </div>
                                <div className="space-y-2">
                                  <Label className="text-sm font-medium text-gray-700">
                                    Notas Adicionales
                                  </Label>
                                  <Textarea
                                    placeholder="Notas sobre la documentaci√≥n..."
                                    rows={3}
                                    className="w-full"
                                  />
                                </div>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    </TabsContent>
                  </Tabs>
                </form>
              </div>
            </div>
          </div>

          {/* Footer con botones de acci√≥n */}
          <div className="absolute bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 shadow-lg z-30">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={onClose}
                  className="border-gray-300 text-gray-700 hover:bg-gray-50"
                >
                  Cancelar
                </Button>
                <Button
                  type="button"
                  variant="outline"
                  onClick={limpiarFormulario}
                  className="border-orange-300 text-orange-700 hover:bg-orange-50"
                >
                  Limpiar Formulario
                </Button>
              </div>
              
              <div className="flex items-center gap-3">
                <div className="text-sm text-gray-600">
                  {(() => {
                    const progress = getFormProgress()
                    return `${progress.camposCompletados} de ${progress.totalCampos} campos completados`
                  })()}
                </div>
                <Button
                  type="submit"
                  onClick={handleSubmit}
                  disabled={loading || !isFormValid()}
                  className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  {loading ? (
                    <>
                      <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                      Procesando...
                    </>
                  ) : (
                    <>
                      <CheckCircle className="h-4 w-4 mr-2" />
                      Registrar Venta
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
      
      {/* Modal de Tabla de Amortizaci√≥n */}
      <TablaAmortizacionModal
        isOpen={showTablaAmortizacion}
        onClose={() => setShowTablaAmortizacion(false)}
        datos={{
          montoFinanciar: parseFloat(formData.saldoPendiente) || 0,
          tasaInteresAnual: parseFloat(formData.tasaInteresAnual) || 0,
          numeroCuotas: parseInt(formData.numeroCuotas) || 1,
          frecuenciaCuota: formData.frecuenciaCuota,
          fechaPrimeraCuota: formData.fechaPrimeraCuota
        }}
        cuotasPersonalizadas={cuotasPersonalizadas}
        modoCuotasPersonalizadas={modoCuotasPersonalizadas}
      />
    </>
  )
} 