        <div className="flex justify-end">
          <Button 
            onClick={() => handleCreateVenta(getTipoVenta())}
            className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white shadow-lg hover:shadow-xl transition-all duration-200 px-6 py-3 font-semibold"
          >
            <div className="flex items-center justify-center w-5 h-5 bg-white/20 rounded-full">
              <FiPlus className="w-3 h-3" />
            </div>
            Nueva Venta
          </Button>
        </div>
      )}

      {/* Lista de ventas */}
      <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-gray-50/30 max-w-full overflow-hidden">
        <CardHeader className="bg-gradient-to-r from-blue-50 to-indigo-50 border-b border-blue-100">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="flex items-center justify-center w-10 h-10 bg-blue-100 rounded-full">
                <FiDollarSign className="h-5 w-5 text-blue-600" />
              </div>
              <div>
                <CardTitle className="text-xl font-semibold text-gray-900">
            Ventas del Proyecto
                </CardTitle>
                <p className="text-sm text-gray-600 mt-1">
                  Gestión y seguimiento de todas las ventas registradas
                </p>
              </div>
            </div>
            {ventas.length > 0 && (
              <div className="flex items-center gap-2">
                <Badge variant="secondary" className="bg-blue-100 text-blue-800 hover:bg-blue-200">
                {ventas.length} ventas
              </Badge>
                <Badge variant="outline" className="text-xs">
                  {ventas.filter(v => v.estado === 'PENDIENTE').length} pendientes
                </Badge>
              </div>
            )}
          </div>
        </CardHeader>
        <CardContent className="p-0">
          {loading ? (
            <div className="flex items-center justify-center py-12">
              <div className="flex flex-col items-center gap-3">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
                <p className="text-gray-600 font-medium">Cargando ventas...</p>
              </div>
            </div>
          ) : ventas.length === 0 ? (
            <div className="text-center py-16 px-6">
              <div className="flex items-center justify-center w-20 h-20 bg-gray-100 rounded-full mx-auto mb-6">
                <FiDollarSign className="w-10 h-10 text-gray-400" />
              </div>
              <h3 className="text-xl font-semibold text-gray-900 mb-3">
                No hay ventas registradas
              </h3>
              <p className="text-gray-600 max-w-md mx-auto leading-relaxed">
                {canCreateSales 
                  ? 'Comienza registrando la primera venta del proyecto para ver las estadísticas y gestionar las transacciones.'
                  : 'Aún no se han registrado ventas para este proyecto. Los administradores pueden crear nuevas ventas.'
                }
              </p>
              {canCreateSales && (
                <Button 
                  onClick={() => handleCreateVenta(getTipoVenta())}
                  className="mt-6 bg-blue-600 hover:bg-blue-700"
                >
                  <FiPlus className="w-4 h-4 mr-2" />
                  Crear Primera Venta
                </Button>
              )}
            </div>
          ) : (
            <div className="overflow-hidden max-w-full">
              <div className="overflow-x-auto max-w-full">
                <Table className="w-full max-w-full">
              <TableHeader>
                    <TableRow className="bg-gradient-to-r from-gray-50 to-gray-100 border-b border-gray-200">
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Unidad</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Cliente</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Vendedor</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Precio</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Tipo de Venta</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Estado</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6">Fecha</TableHead>
                      <TableHead className="font-semibold text-gray-700 py-4 px-6 text-right">Opciones</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                    {ventas.map((venta, index) => (
                      <React.Fragment key={venta.id}>
                  <TableRow 
                          className={`cursor-pointer transition-all duration-200 hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 hover:shadow-sm ${
                            index % 2 === 0 ? 'bg-white' : 'bg-gray-50/30'
                          }`}
                    onClick={() => handleRowClick(venta)}
                  >
                        <TableCell className="py-4 px-6">
                          <div className="flex items-center gap-3">
                            <div className={`flex items-center justify-center w-8 h-8 rounded-full ${
                              venta.tipoVenta === 'LOTE' 
                                ? 'bg-green-100 text-green-600' 
                                : 'bg-purple-100 text-purple-600'
                            }`}>
                              {venta.tipoVenta === 'LOTE' ? (
                                <FiTrendingUp className="w-4 h-4" />
                              ) : (
                                <FiDollarSign className="w-4 h-4" />
                              )}
                            </div>
                            <div>
                              <div className="font-semibold text-gray-900 whitespace-nowrap">
                        {venta.unidad?.codigo || 'Sin código'}
                              </div>
                              <div className="text-xs text-gray-500">
                                {venta.tipoVenta === 'LOTE' ? 'Lote' : 'Unidad Cementerio'}
                              </div>
                            </div>
                      </div>
                    </TableCell>
                        <TableCell className="py-4 px-6">
                          <div className="space-y-2">
                            {/* Cliente principal */}
                            <div className="flex items-center gap-3">
                              <div className="flex items-center justify-center w-8 h-8 bg-blue-100 rounded-full">
                                <span className="text-sm font-semibold text-blue-600">
                                  {venta.cliente?.nombre?.charAt(0) || 'C'}
                                </span>
                              </div>
                      <div>
                                <div className="font-medium text-gray-900">
                          {venta.cliente ? `${venta.cliente.nombre} ${venta.cliente.apellido || ''}` : 'Cliente no disponible'}
                        </div>
                        {venta.cliente?.email && (
                                  <div className="text-xs text-gray-500 truncate max-w-[200px]">
                                    {venta.cliente.email}
                                  </div>
                                )}
