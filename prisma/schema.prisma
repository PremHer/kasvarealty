generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmpresaDesarrolladora {
  id                              String                 @id @default(cuid())
  nombre                          String
  ruc                             String                 @unique
  direccion                       String
  telefono                        String?
  email                           String?
  website                         String?
  logo                            String?
  descripcion                     String?
  createdAt                       DateTime               @default(now())
  updatedAt                       DateTime               @updatedAt
  isActive                        Boolean                @default(true)
  createdBy                       String?
  updatedBy                       String?
  representanteLegalId            String?
  bancos                          TipoBanco[]
  billeterasVirtuales             TipoBilleteraVirtual[]
  numeroProyectos                 Int                    @default(0)
  proyectos                       Proyecto[]
  representanteLegal              Usuario?               @relation("RepresentanteLegal", fields: [representanteLegalId], references: [id])
  usuarios                        Usuario[]              @relation("EmpresaUsuario")
  usuarios_GerenteGeneralEmpresas Usuario[]              @relation("GerenteGeneralEmpresas")

  @@map("empresas_desarrolladoras")
}

model Usuario {
  id                                              String                  @id @default(cuid())
  email                                           String                  @unique
  password                                        String
  nombre                                          String
  rol                                             Rol                     @default(GUEST)
  createdAt                                       DateTime                @default(now())
  updatedAt                                       DateTime                @updatedAt
  resetToken                                      String?
  resetTokenExpiry                                DateTime?
  isActive                                        Boolean                 @default(true)
  lastLogin                                       DateTime?
  empresaDesarrolladoraId                         String?
  createdBy                                       String?
  updatedBy                                       String?
  actividades                                     Actividad[]
  comentarios                                     Comentario[]
  documentos                                      Documento[]
  proyectosAprobados                              Proyecto[]              @relation("ProjectApprover")
  proyectosCreados                                Proyecto[]              @relation("ProjectCreator")
  proyectosGestionados                            Proyecto[]              @relation("ProjectManager")
  empresasRepresentante                           EmpresaDesarrolladora[] @relation("RepresentanteLegal")
  empresaDesarrolladora                           EmpresaDesarrolladora?  @relation("EmpresaUsuario", fields: [empresaDesarrolladoraId], references: [id])
  empresas_desarrolladoras_GerenteGeneralEmpresas EmpresaDesarrolladora[] @relation("GerenteGeneralEmpresas")
  proyectosMiembro                                Proyecto[]              @relation("ProjectMembers")
  clientesCreados                                 Cliente[]               @relation("ClienteCreadoPor")
  manzanasCreadas                                 Manzana[]               @relation("ManzanaCreadoPor")
  manzanasActualizadas                            Manzana[]               @relation("ManzanaActualizadoPor")
  lotesCreados                                    Lote[]                  @relation("LoteCreadoPor")
  lotesActualizados                               Lote[]                  @relation("LoteActualizadoPor")
  ventasLotesCreadas                              VentaLote[]             @relation("VentaLoteCreadoPor")
  ventasLotesActualizadas                         VentaLote[]             @relation("VentaLoteActualizadoPor")

  @@map("usuarios")
}

model Proyecto {
  id                      String                @id @default(cuid())
  nombre                  String
  tipo                    TipoProyecto
  descripcion             String
  direccion               String
  empresaDesarrolladoraId String
  fechaInicio             DateTime
  fechaFin                DateTime?
  estado                  EstadoProyecto        @default(DRAFT)
  gerenteId               String?
  creadoPorId             String
  aprobadoPorId           String?
  fechaAprobacion         DateTime?
  razonRechazo            String?
  areaTotal               Float?
  areaUtil                Float?
  cantidadUnidades        Int?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  departamento            String?
  distrito                String?
  inversionActual         Float?                @map("inversion_actual")
  inversionInicial        Float?                @map("inversion_inicial")
  inversionTotal          Float?                @map("inversion_total")
  latitud                 Float?
  longitud                Float?
  precioTerreno           Float?                @map("precio_terreno")
  provincia               String?
  actividades             Actividad[]
  comentarios             Comentario[]
  documentos              Documento[]
  aprobadoPor             Usuario?              @relation("ProjectApprover", fields: [aprobadoPorId], references: [id])
  creadoPor               Usuario               @relation("ProjectCreator", fields: [creadoPorId], references: [id])
  empresaDesarrolladora   EmpresaDesarrolladora @relation(fields: [empresaDesarrolladoraId], references: [id])
  gerente                 Usuario?              @relation("ProjectManager", fields: [gerenteId], references: [id], onUpdate: NoAction)
  unidades                UnidadInmobiliaria[]
  miembros                Usuario[]             @relation("ProjectMembers")
  manzanas                Manzana[]

  @@index([latitud, longitud])
}

model UnidadInmobiliaria {
  id         String       @id @default(cuid())
  codigo     String       @unique
  tipo       String
  estado     EstadoUnidad
  precio     Float
  area       Float
  proyectoId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  proyecto   Proyecto     @relation(fields: [proyectoId], references: [id])
  ventas     Venta[]
}

model Venta {
  id                   String             @id @default(cuid())
  unidadInmobiliariaId String
  clienteId            String
  fechaVenta           DateTime
  precioVenta          Float
  estado               EstadoVenta
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  cliente              Cliente            @relation(fields: [clienteId], references: [id])
  unidadInmobiliaria   UnidadInmobiliaria @relation(fields: [unidadInmobiliariaId], references: [id])
}

model Direccion {
  id              String        @id @default(cuid())
  tipo            TipoDireccion
  pais            String        // Para nacionales será "Perú", para extranjeros será el país ingresado
  ciudad          String        // Ciudad o distrito
  direccion       String
  referencia      String?
  cliente         Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId       String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([clienteId])
}

model Cliente {
  id              String        @id @default(cuid())
  tipo            TipoCliente
  nombre          String?       // Para personas naturales
  apellido        String?       // Para personas naturales
  sexo            Sexo?         // Para personas naturales
  razonSocial     String?       // Para empresas
  ruc             String?       // Para empresas
  dni             String?       // Para personas naturales
  email           String        @unique
  telefono        String?
  fechaNacimiento DateTime?     // Para personas naturales
  estadoCivil     EstadoCivil?  // Para personas naturales
  ocupacion       String?       // Para personas naturales
  representanteLegal String?    // Para empresas
  cargoRepresentante String?    // Para empresas
  isActive        Boolean       @default(true)
  direcciones     Direccion[]
  ventas          Venta[]
  ventasLotes     VentaLote[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  creadoPorId     String?
  creadoPor       Usuario?      @relation("ClienteCreadoPor", fields: [creadoPorId], references: [id])

  @@index([email])
  @@index([ruc])
  @@index([dni])
  @@index([creadoPorId])
}

model Actividad {
  id          String   @id @default(cuid())
  tipo        String
  descripcion String
  proyectoId  String
  usuarioId   String
  createdAt   DateTime @default(now())
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
}

model Comentario {
  id         String   @id @default(cuid())
  contenido  String
  proyectoId String
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

model Documento {
  id         String   @id @default(cuid())
  nombre     String
  url        String
  tipo       String
  proyectoId String
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

model Manzana {
  id                String   @id @default(cuid())
  codigo            String   // A, B, C, ..., Z, AA, AB, AC, ...
  nombre            String   // Nombre descriptivo de la manzana
  areaTotal         Float    @default(0) // Suma de áreas de todos los lotes
  cantidadLotes     Int      @default(0) // Cantidad de lotes en la manzana
  proyectoId        String
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  createdBy         String?
  updatedBy         String?
  descripcion       String?
  observaciones     String?
  proyecto          Proyecto @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  lotes             Lote[]
  creadoPorUsuario  Usuario? @relation("ManzanaCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario Usuario? @relation("ManzanaActualizadoPor", fields: [updatedBy], references: [id])

  @@unique([codigo, proyectoId])
  @@index([proyectoId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("manzanas")
}

model Lote {
  id                String       @id @default(cuid())
  codigo            String       // Código único del lote (ej: A-01, A-02, B-01, etc.)
  numero            String       // Número del lote
  area              Float        // Área del lote en m²
  frente            Float?       // Frente del lote en metros
  fondo             Float?       // Fondo del lote en metros
  precio            Float?       // Precio del lote
  estado            EstadoLote   @default(DISPONIBLE)
  manzanaId         String
  isActive          Boolean      @default(true)
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  createdBy         String?
  updatedBy         String?
  descripcion       String?
  observaciones     String?
  coordenadas       String?      // Coordenadas GPS del lote
  manzana           Manzana      @relation(fields: [manzanaId], references: [id], onDelete: Cascade)
  ventas            VentaLote[]
  creadoPorUsuario  Usuario?     @relation("LoteCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario Usuario? @relation("LoteActualizadoPor", fields: [updatedBy], references: [id])

  @@unique([codigo, manzanaId])
  @@index([manzanaId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("lotes")
}

model VentaLote {
  id                   String             @id @default(cuid())
  loteId               String
  clienteId            String
  fechaVenta           DateTime
  precioVenta          Float
  estado               EstadoVentaLote    @default(PENDIENTE)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  lote                 Lote               @relation(fields: [loteId], references: [id], onDelete: Cascade)
  cliente              Cliente            @relation(fields: [clienteId], references: [id])
  createdBy            String?
  updatedBy            String?
  creadoPorUsuario     Usuario?           @relation("VentaLoteCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario Usuario?          @relation("VentaLoteActualizadoPor", fields: [updatedBy], references: [id])

  @@index([loteId])
  @@index([clienteId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("ventas_lotes")
}

enum Rol {
  SUPER_ADMIN
  ADMIN
  GERENTE_GENERAL
  DEVELOPER
  SALES_MANAGER
  SALES_REP
  SALES_ASSISTANT
  SALES_COORDINATOR
  PROJECT_MANAGER
  CONSTRUCTION_SUPERVISOR
  QUALITY_CONTROL
  PROJECT_ASSISTANT
  FINANCE_MANAGER
  ACCOUNTANT
  FINANCE_ASSISTANT
  INVESTOR
  GUEST
}

enum EstadoProyecto {
  DRAFT
  PENDING_APPROVAL
  PENDING_ASSIGNMENT
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TipoProyecto {
  CASA_INDIVIDUAL
  CONDOMINIO_CASAS
  DEPARTAMENTO
  CONDOMINIO_DEPARTAMENTOS
  DUPLEX
  PENTHOUSE
  TOWNHOUSE
  CENTRO_COMERCIAL
  MODULO_COMERCIAL
  GALERIA_COMERCIAL
  PLAZA_COMERCIAL
  OFICINAS
  BODEGA
  SHOWROOM
  MIXTO_RESIDENCIAL_COMERCIAL
  MIXTO_OFICINAS_COMERCIAL
  LOTIZACION
  CEMENTERIO
  HOTEL
  HOSPITAL
  CLINICA
  COLEGIO
  UNIVERSIDAD
  ESTADIO
  COMPLEJO_DEPORTIVO
  PARQUE_INDUSTRIAL
}

enum EstadoUnidad {
  DISPONIBLE
  RESERVADO
  VENDIDO
  ENTREGADO
}

enum EstadoVenta {
  PENDIENTE
  APROBADA
  CANCELADA
  ENTREGADA
}

enum TipoBanco {
  BCP
  BBVA
  INTERBANK
  SCOTIABANK
  BANBIF
  MIBANCO
  BANCO_PICHINCHA
  BANCO_GNB
  BANCO_FALABELLA
  BANCO_RIPLEY
}

enum TipoBilleteraVirtual {
  YAPE
  PLIN
  TUNKI
  AGRARIO
  BIM
}

enum TipoCliente {
  INDIVIDUAL
  EMPRESA
}

enum EstadoCivil {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
}

enum Sexo {
  MASCULINO
  FEMENINO
}

enum TipoDireccion {
  NACIONAL
  EXTRANJERA
}

enum EstadoLote {
  DISPONIBLE
  RESERVADO
  VENDIDO
  ENTREGADO
}

enum EstadoVentaLote {
  PENDIENTE
  APROBADA
  CANCELADA
  ENTREGADA
}
