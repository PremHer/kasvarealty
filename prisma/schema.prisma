generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model EmpresaDesarrolladora {
  id                              String                 @id @default(cuid())
  nombre                          String
  ruc                             String                 @unique
  direccion                       String
  telefono                        String?
  email                           String?                @unique
  website                         String?
  logo                            String?
  descripcion                     String?
  createdAt                       DateTime               @default(now())
  updatedAt                       DateTime               @updatedAt
  isActive                        Boolean                @default(true)
  createdBy                       String?
  updatedBy                       String?
  representanteLegalId            String?
  bancos                          TipoBanco[]
  billeterasVirtuales             TipoBilleteraVirtual[]
  numeroProyectos                 Int                    @default(0)
  bancoPrincipal                  String?
  cci                             String?
  emailPagos                      String?
  numeroCuenta                    String?
  tipoCuenta                      String?
  titularCuenta                   String?
  representanteLegal              Usuario?               @relation("RepresentanteLegal", fields: [representanteLegalId], references: [id])
  proyectos                       Proyecto[]
  recibosPago                     ReciboPago[]
  usuarios                        Usuario[]              @relation("EmpresaUsuario")
  usuarios_GerenteGeneralEmpresas Usuario[]              @relation("GerenteGeneralEmpresas")

  @@map("empresas_desarrolladoras")
}

model Usuario {
  id                                     String                  @id @default(cuid())
  email                                  String?                 @unique
  password                               String
  nombre                                 String
  rol                                    Rol
  createdAt                              DateTime                @default(now())
  updatedAt                              DateTime                @updatedAt
  isActive                               Boolean                 @default(true)
  lastLogin                              DateTime?
  empresaDesarrolladoraId                String?
  departamento                           String?
  direccion                              String?
  distrito                               String?
  dni                                    String?                 @unique
  fechaNacimiento                        DateTime?
  provincia                              String?
  sexo                                   Sexo?
  estadoCivil                            EstadoCivil?
  profesion                             String?
  auditoriaCreadaPor                     Auditoria[]             @relation("AuditoriaCreadaPor")
  auditoria                              Auditoria[]
  notificacionesCreadaPor                Notificacion[]          @relation("NotificacionCreadaPor")
  notificaciones                         Notificacion[]
  actividades                            Actividad[]
  cancelacionesAprobadoPor               CancelacionVenta[]      @relation("CancelacionAprobadoPor")
  cancelacionesCreadoPor                 CancelacionVenta[]      @relation("CancelacionCreadoPor")
  cancelacionesActualizadoPor            CancelacionVenta[]      @relation("CancelacionActualizadoPor")
  clientesCreadoPor                      Cliente[]               @relation("ClienteCreadoPor")
  clientesActualizadoPor                 Cliente[]               @relation("ClienteActualizadoPor")
  comentarios                            Comentario[]
  contratosCreadoPor                     Contrato[]              @relation("ContratoCreadoPor")
  contratosActualizadoPor                Contrato[]              @relation("ContratoActualizadoPor")
  cuotasCreadoPor                        Cuota[]                 @relation("CuotaCreadoPor")
  cuotasActualizadoPor                   Cuota[]                 @relation("CuotaActualizadoPor")
  documentos                             Documento[]
  empresasRepresentante                  EmpresaDesarrolladora[] @relation("RepresentanteLegal")
  lotesCreadoPor                         Lote[]                  @relation("LoteCreadoPor")
  lotesActualizadoPor                    Lote[]                  @relation("LoteActualizadoPor")
  manzanasCreadoPor                      Manzana[]               @relation("ManzanaCreadoPor")
  manzanasActualizadoPor                 Manzana[]               @relation("ManzanaActualizadoPor")
  pabellonesCreadoPor                    Pabellon[]              @relation("PabellonCreadoPor")
  pabellonesActualizadoPor               Pabellon[]              @relation("PabellonActualizadoPor")
  pagosComisionesCreadoPor               PagoComision[]          @relation("PagoComisionCreadoPor")
  pagosComisionesActualizadoPor          PagoComision[]          @relation("PagoComisionActualizadoPor")
  pagosCuotasCreadoPor                   PagoCuota[]             @relation("PagoCuotaCreadoPor")
  pagosCuotasActualizadoPor              PagoCuota[]             @relation("PagoCuotaActualizadoPor")
  perfilesVendedorCreadoPor              PerfilVendedor[]        @relation("PerfilVendedorCreadoPor")
  perfilesVendedorActualizadoPor         PerfilVendedor[]        @relation("PerfilVendedorActualizadoPor")
  perfilVendedor                         PerfilVendedor?
  proyectosAprobadoPor                   Proyecto[]              @relation("ProjectApprover")
  proyectosCreadoPor                     Proyecto[]              @relation("ProjectCreator")
  proyectosGerente                       Proyecto[]              @relation("ProjectManager")
  recibosPagoCreadoPor                   ReciboPago[]            @relation("ReciboPagoCreadoPor")
  recibosPagoActualizadoPor              ReciboPago[]            @relation("ReciboPagoActualizadoPor")
  recibosPagoVendedor                    ReciboPago[]            @relation("ReciboPagoVendedor")
  reservasCreadoPor                      Reserva[]               @relation("ReservaCreadoPor")
  reservasActualizadoPor                 Reserva[]               @relation("ReservaActualizadoPor")
  reservasVendedor                       Reserva[]               @relation("ReservaVendedor")
  unidadesCementerioCreadoPor            UnidadCementerio[]      @relation("UnidadCementerioCreadoPor")
  unidadesCementerioActualizadoPor       UnidadCementerio[]      @relation("UnidadCementerioActualizadoPor")
  empresaDesarrolladora                  EmpresaDesarrolladora?  @relation("EmpresaUsuario", fields: [empresaDesarrolladoraId], references: [id])
  ventasLotesAprobador                   VentaLote[]             @relation("VentaLoteAprobador")
  ventasLotesCreadoPor                   VentaLote[]             @relation("VentaLoteCreadoPor")
  ventasLotesActualizadoPor              VentaLote[]             @relation("VentaLoteActualizadoPor")
  ventasLotesVendedor                    VentaLote[]             @relation("VentaLoteVendedor")
  ventasUnidadesCementerioAprobador      VentaUnidadCementerio[] @relation("VentaUnidadCementerioAprobador")
  ventasUnidadesCementerioCreadoPor      VentaUnidadCementerio[] @relation("VentaUnidadCementerioCreadoPor")
  ventasUnidadesCementerioActualizadoPor VentaUnidadCementerio[] @relation("VentaUnidadCementerioActualizadoPor")
  ventasUnidadesCementerioVendedor       VentaUnidadCementerio[] @relation("VentaUnidadCementerioVendedor")
  empresasGerenteGeneral                 EmpresaDesarrolladora[] @relation("GerenteGeneralEmpresas")
  proyectosMiembro                       Proyecto[]              @relation("ProjectMembers")
  
  @@index([email])
  @@index([rol])
  @@index([empresaDesarrolladoraId])
  @@index([isActive])
  @@map("usuarios")
}

model Proyecto {
  id                       String                  @id @default(cuid())
  nombre                   String
  tipo                     TipoProyecto
  descripcion              String
  direccion                String
  empresaDesarrolladoraId  String
  fechaInicio              DateTime
  fechaFin                 DateTime?
  estado                   EstadoProyecto          @default(DRAFT)
  gerenteId                String?
  creadoPorId              String
  aprobadoPorId            String?
  fechaAprobacion          DateTime?
  razonRechazo             String?
  areaTotal                Float?
  areaUtil                 Float?
  cantidadUnidades         Int?
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  departamento             String?
  distrito                 String?
  inversionActual          Float?                  @map("inversion_actual")
  inversionInicial         Float?                  @map("inversion_inicial")
  inversionTotal           Float?                  @map("inversion_total")
  latitud                  Float?
  longitud                 Float?
  precioTerreno            Float?                  @map("precio_terreno")
  provincia                String?
  
  // Campos del predio matriz
  extensionTotal           Float?                  // Extensión total del predio matriz en hectáreas
  unidadCatastral          String?                 // Unidad catastral del predio matriz
  partidaRegistral         String?                 // Partida registral del predio matriz
  plazoIndependizacion     Int?                    // Plazo para independización en meses
  
  actividades              Actividad[]
  comentarios              Comentario[]
  documentos               Documento[]
  manzanas                 Manzana[]
  pabellones               Pabellon[]
  aprobadoPor              Usuario?                @relation("ProjectApprover", fields: [aprobadoPorId], references: [id])
  creadoPor                Usuario                 @relation("ProjectCreator", fields: [creadoPorId], references: [id])
  empresaDesarrolladora    EmpresaDesarrolladora   @relation(fields: [empresaDesarrolladoraId], references: [id])
  gerente                  Usuario?                @relation("ProjectManager", fields: [gerenteId], references: [id], onUpdate: NoAction)
  reservas                 Reserva[]
  unidades                 UnidadInmobiliaria[]
  ventasLotes              VentaLote[]
  ventasUnidadesCementerio VentaUnidadCementerio[]
  miembros                 Usuario[]               @relation("ProjectMembers")
  caracteristicas          CaracteristicaProyecto[] @relation("ProyectoCaracteristicas")

  @@index([latitud, longitud])
  @@index([empresaDesarrolladoraId])
  @@index([creadoPorId])
  @@index([aprobadoPorId])
  @@index([gerenteId])
  @@index([tipo])
  @@index([estado])
  @@map("proyectos")
}

model CaracteristicaProyecto {
  id          String   @id @default(cuid())
  nombre      String   // Ej: "Habilitación para alumbrado público"
  descripcion String?  // Descripción opcional de la característica
  activa      Boolean  @default(true) // Si la característica está activa
  orden       Int      @default(0) // Orden de aparición en el contrato
  proyectoId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  proyecto    Proyecto @relation("ProyectoCaracteristicas", fields: [proyectoId], references: [id], onDelete: Cascade)
  
  @@index([proyectoId])
  @@index([orden])
  @@map("caracteristicas_proyecto")
}

model UnidadInmobiliaria {
  id         String       @id @default(cuid())
  codigo     String       @unique
  tipo       String
  estado     EstadoUnidad
  precio     Float
  area       Float
  proyectoId String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  proyecto   Proyecto     @relation(fields: [proyectoId], references: [id])
  ventas     Venta[]

  @@index([proyectoId])
  @@map("unidades_inmobiliarias")
}

model Venta {
  id                   String             @id @default(cuid())
  unidadInmobiliariaId String
  clienteId            String
  fechaVenta           DateTime
  precioVenta          Float
  estado               EstadoVenta
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  cliente              Cliente            @relation(fields: [clienteId], references: [id])
  unidadInmobiliaria   UnidadInmobiliaria @relation(fields: [unidadInmobiliariaId], references: [id])

  @@index([clienteId])
  @@index([unidadInmobiliariaId])
  @@index([estado])
  @@index([fechaVenta])
  @@map("ventas")
}

model Direccion {
  id         String        @id @default(cuid())
  tipo       TipoDireccion
  pais       String
  distrito   String
  provincia  String
  departamento String
  direccion  String
  referencia String?
  clienteId  String
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  cliente    Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)

  @@index([clienteId])
  @@map("direcciones")
}

model Cliente {
  id                               String                         @id @default(cuid())
  nombre                           String
  apellido                         String?
  email                            String?                        @unique
  telefono                         String?
  dni                              String?                        @unique
  ruc                              String?                        @unique
  tipoCliente                      TipoCliente                    @default(INDIVIDUAL)
  estadoCivil                      EstadoCivil?
  sexo                             Sexo?
  fechaNacimiento                  DateTime?
  isActive                         Boolean                        @default(true)
  createdAt                        DateTime                       @default(now())
  updatedAt                        DateTime                       @updatedAt
  createdBy                        String?
  updatedBy                        String?
  cargoRepresentante               String?
  razonSocial                      String?
  representanteLegal               String?
  creadoPorUsuario                 Usuario?                       @relation("ClienteCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario            Usuario?                       @relation("ClienteActualizadoPor", fields: [updatedBy], references: [id])
  direcciones                      Direccion[]
  recibosPago                      ReciboPago[]
  reservas                         Reserva[]
  ventas                           Venta[]
  ventasLotes                      VentaLote[]
  ventasLotesClientes              VentaLoteCliente[]             @relation("VentaLoteCliente")
  ventasUnidadesCementerio         VentaUnidadCementerio[]
  ventasUnidadesCementerioClientes VentaUnidadCementerioCliente[] @relation("VentaUnidadCementerioCliente")

  @@index([createdBy])
  @@index([updatedBy])
  @@index([isActive])
  @@index([email])
  @@index([dni])
  @@index([ruc])
  @@map("clientes")
}

model Actividad {
  id          String   @id @default(cuid())
  tipo        String
  descripcion String
  proyectoId  String
  usuarioId   String
  createdAt   DateTime @default(now())
  proyecto    Proyecto @relation(fields: [proyectoId], references: [id])
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([proyectoId])
  @@index([usuarioId])
  @@map("actividades")
}

model Comentario {
  id         String   @id @default(cuid())
  contenido  String
  proyectoId String
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([proyectoId])
  @@index([usuarioId])
  @@map("comentarios")
}

model Documento {
  id         String   @id @default(cuid())
  nombre     String
  url        String
  tipo       String
  proyectoId String
  usuarioId  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proyecto   Proyecto @relation(fields: [proyectoId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])

  @@index([proyectoId])
  @@index([usuarioId])
  @@map("documentos")
}

model Manzana {
  id                    String      @id @default(cuid())
  codigo                String
  nombre                String
  areaTotal             Float       @default(0)
  cantidadLotes         Int         @default(0)
  proyectoId            String
  isActive              Boolean     @default(true)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  createdBy             String?
  updatedBy             String?
  descripcion           String?
  observaciones         String?
  lotes                 Lote[]
  creadoPorUsuario      Usuario?    @relation("ManzanaCreadoPor", fields: [createdBy], references: [id])
  proyecto              Proyecto    @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario Usuario?    @relation("ManzanaActualizadoPor", fields: [updatedBy], references: [id])
  ventasLotes           VentaLote[]

  @@unique([codigo, proyectoId])
  @@index([proyectoId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("manzanas")
}

model Lote {
  id                    String      @id @default(cuid())
  codigo                String
  numero                String
  area                  Float
  perimetro             Float?      // Perímetro total del lote en metros
  precio                Float?
  estado                EstadoLote  @default(DISPONIBLE)
  latitud               Float?
  longitud              Float?
  linderoFrente         String?
  linderoFondo          String?
  linderoIzquierda      String?
  linderoDerecha        String?
  dimensionFrente       Float?
  dimensionFondo        Float?
  dimensionIzquierda    Float?
  dimensionDerecha      Float?
  descripcion           String?
  observaciones         String?
  caracteristicas       String?
  tipoTerreno           String?
  servicios             String?
  manzanaId             String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  createdBy             String?
  updatedBy             String?
  creadoPorUsuario      Usuario?    @relation("LoteCreadoPor", fields: [createdBy], references: [id])
  manzana               Manzana     @relation(fields: [manzanaId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario Usuario?    @relation("LoteActualizadoPor", fields: [updatedBy], references: [id])
  reservas              Reserva[]
  ventasLotes           VentaLote[]

  @@unique([codigo, manzanaId])
  @@index([manzanaId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([estado])
  @@map("lotes")
}

model VentaLote {
  id                    String              @id @default(cuid())
  loteId                String
  clienteId             String
  fechaVenta            DateTime
  precioVenta           Float
  estado                EstadoVentaLote     @default(PENDIENTE)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  createdBy             String?
  updatedBy             String?
  aprobadorId           String?
  fechaAprobacion       DateTime?
  manzanaId             String
  metodoPago            String?
  observaciones         String?
  proyectoId            String
  vendedorId            String
  comisionVendedor      Float?              @default(0)
  condicionesEspeciales String?
  documentosRequeridos  String?
  estadoDocumentacion   EstadoDocumentacion @default(PENDIENTE)
  fechaEntrega          DateTime?
  fechaPrimeraCuota     DateTime?
  formaPago             FormaPago?
  frecuenciaCuota       FrecuenciaCuota?    @default(MENSUAL)
  montoCuota            Float?
  montoDescuento        Float               @default(0)
  montoInicial          Float?              @default(0)
  motivoDescuento       String?
  numeroCuotas          Int?                @default(1)
  porcentajeComision    Float?              @default(0)
  precioOriginal        Float
  saldoPendiente        Float?              @default(0)
  tipoVenta             TipoVenta           @default(CONTADO)
  montoCapital          Float?              @default(0)
  montoIntereses        Float?              @default(0)
  saldoCapital          Float?              @default(0)
  tasaInteres           Float?              @default(0)
  tasaMora              Float?              @default(0)
  modeloAmortizacion    ModeloAmortizacion? @default(FRANCES)
  numeroOperacion       String?             // Número de operación bancaria para el pago inicial
  cancelaciones         CancelacionVenta[]
  comprobantesPago      ComprobantePago[]
  contratos             Contrato[]
  cuotas                Cuota[]
  pagosComisiones       PagoComision[]
  recibosPago           ReciboPago[]
  reservas              Reserva[]
  aprobador             Usuario?            @relation("VentaLoteAprobador", fields: [aprobadorId], references: [id])
  cliente               Cliente             @relation(fields: [clienteId], references: [id])
  creadoPorUsuario      Usuario?            @relation("VentaLoteCreadoPor", fields: [createdBy], references: [id])
  lote                  Lote                @relation(fields: [loteId], references: [id], onDelete: Cascade)
  manzana               Manzana             @relation(fields: [manzanaId], references: [id])
  proyecto              Proyecto            @relation(fields: [proyectoId], references: [id])
  actualizadoPorUsuario Usuario?            @relation("VentaLoteActualizadoPor", fields: [updatedBy], references: [id])
  vendedor              Usuario             @relation("VentaLoteVendedor", fields: [vendedorId], references: [id])
  clientes              VentaLoteCliente[]

  @@index([loteId])
  @@index([manzanaId])
  @@index([proyectoId])
  @@index([clienteId])
  @@index([vendedorId])
  @@index([aprobadorId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([estado])
  @@index([fechaVenta])
  @@index([tipoVenta])
  @@index([estadoDocumentacion])
  @@map("ventas_lotes")
}

model VentaLoteCliente {
  id          String    @id @default(cuid())
  ventaLoteId String
  clienteId   String
  createdAt   DateTime  @default(now())
  cliente     Cliente   @relation("VentaLoteCliente", fields: [clienteId], references: [id], onDelete: Cascade)
  ventaLote   VentaLote @relation(fields: [ventaLoteId], references: [id], onDelete: Cascade)
  
  @@unique([ventaLoteId, clienteId])
  @@index([ventaLoteId])
  @@index([clienteId])
  @@map("ventas_lotes_clientes")
}

model VentaUnidadCementerio {
  id                    String                         @id @default(cuid())
  unidadCementerioId    String
  pabellonId            String
  proyectoId            String
  clienteId             String
  vendedorId            String
  aprobadorId           String?
  fechaVenta            DateTime
  fechaAprobacion       DateTime?
  precioVenta           Float
  estado                EstadoVentaUnidadCementerio    @default(PENDIENTE)
  metodoPago            String?
  observaciones         String?
  createdAt             DateTime                       @default(now())
  updatedAt             DateTime                       @updatedAt
  createdBy             String?
  updatedBy             String?
  comisionVendedor      Float?                         @default(0)
  condicionesEspeciales String?
  documentosRequeridos  String?
  estadoDocumentacion   EstadoDocumentacion            @default(PENDIENTE)
  fechaEntrega          DateTime?
  fechaPrimeraCuota     DateTime?
  formaPago             FormaPago?
  frecuenciaCuota       FrecuenciaCuota?               @default(MENSUAL)
  montoCuota            Float?
  montoDescuento        Float                          @default(0)
  montoInicial          Float?                         @default(0)
  motivoDescuento       String?
  numeroCuotas          Int?                           @default(1)
  porcentajeComision    Float?                         @default(0)
  precioOriginal        Float
  saldoPendiente        Float?                         @default(0)
  tipoVenta             TipoVenta                      @default(CONTADO)
  montoCapital          Float?                         @default(0)
  montoIntereses        Float?                         @default(0)
  saldoCapital          Float?                         @default(0)
  tasaInteres           Float?                         @default(0)
  tasaMora              Float?                         @default(0)
  modeloAmortizacion    ModeloAmortizacion?            @default(FRANCES)
  numeroOperacion       String?                        // Número de operación bancaria para el pago inicial
  cancelaciones         CancelacionVenta[]
  comprobantesPago      ComprobantePago[]
  contratos             Contrato[]
  cuotas                Cuota[]
  pagosComisiones       PagoComision[]
  aprobador             Usuario?                       @relation("VentaUnidadCementerioAprobador", fields: [aprobadorId], references: [id])
  cliente               Cliente                        @relation(fields: [clienteId], references: [id])
  creadoPorUsuario      Usuario?                       @relation("VentaUnidadCementerioCreadoPor", fields: [createdBy], references: [id])
  pabellon              Pabellon                       @relation(fields: [pabellonId], references: [id])
  proyecto              Proyecto                       @relation(fields: [proyectoId], references: [id])
  unidadCementerio      UnidadCementerio               @relation(fields: [unidadCementerioId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario Usuario?                       @relation("VentaUnidadCementerioActualizadoPor", fields: [updatedBy], references: [id])
  vendedor              Usuario                        @relation("VentaUnidadCementerioVendedor", fields: [vendedorId], references: [id])
  clientes              VentaUnidadCementerioCliente[]

  @@index([unidadCementerioId])
  @@index([pabellonId])
  @@index([proyectoId])
  @@index([clienteId])
  @@index([vendedorId])
  @@index([aprobadorId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([estado])
  @@index([fechaVenta])
  @@index([tipoVenta])
  @@index([estadoDocumentacion])
  @@map("ventas_unidades_cementerio")
}

model VentaUnidadCementerioCliente {
  id                      String                @id @default(cuid())
  ventaUnidadCementerioId String
  clienteId               String
  createdAt               DateTime              @default(now())
  cliente                 Cliente               @relation("VentaUnidadCementerioCliente", fields: [clienteId], references: [id], onDelete: Cascade)
  ventaUnidadCementerio   VentaUnidadCementerio @relation(fields: [ventaUnidadCementerioId], references: [id], onDelete: Cascade)
  
  @@unique([ventaUnidadCementerioId, clienteId])
  @@index([ventaUnidadCementerioId])
  @@index([clienteId])
  @@map("ventas_unidades_cementerio_clientes")
}

model Pabellon {
  id                       String                  @id @default(cuid())
  codigo                   String
  nombre                   String
  areaTotal                Float                   @default(0)
  cantidadUnidades         Int                     @default(0)
  proyectoId               String
  isActive                 Boolean                 @default(true)
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  createdBy                String?
  updatedBy                String?
  descripcion              String?
  observaciones            String?
  creadoPorUsuario         Usuario?                @relation("PabellonCreadoPor", fields: [createdBy], references: [id])
  proyecto                 Proyecto                @relation(fields: [proyectoId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario    Usuario?                @relation("PabellonActualizadoPor", fields: [updatedBy], references: [id])
  unidades                 UnidadCementerio[]
  ventasUnidadesCementerio VentaUnidadCementerio[]

  @@unique([codigo, proyectoId])
  @@index([proyectoId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("pabellones")
}

model UnidadCementerio {
  id                       String                  @id @default(cuid())
  codigo                   String
  tipoUnidad               TipoUnidadCementerio
  precio                   Float
  estado                   EstadoUnidadCementerio  @default(DISPONIBLE)
  latitud                  Float?
  longitud                 Float?
  descripcion              String?
  observaciones            String?
  pabellonId               String
  createdAt                DateTime                @default(now())
  updatedAt                DateTime                @updatedAt
  createdBy                String?
  updatedBy                String?
  mausoleo                 Mausoleo?
  nicho                    Nicho?
  parcela                  Parcela?
  reservas                 Reserva[]
  creadoPorUsuario         Usuario?                @relation("UnidadCementerioCreadoPor", fields: [createdBy], references: [id])
  pabellon                 Pabellon                @relation(fields: [pabellonId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario    Usuario?                @relation("UnidadCementerioActualizadoPor", fields: [updatedBy], references: [id])
  ventasUnidadesCementerio VentaUnidadCementerio[]

  @@unique([codigo, pabellonId])
  @@index([pabellonId])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([estado])
  @@index([tipoUnidad])
  @@map("unidades_cementerio")
}

model Parcela {
  id                 String           @id @default(cuid())
  unidadCementerioId String           @unique
  dimensionLargo     Float
  dimensionAncho     Float
  capacidad          Int
  tipoTerreno        TipoTerreno
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  unidadCementerio   UnidadCementerio @relation(fields: [unidadCementerioId], references: [id], onDelete: Cascade)

  @@map("parcelas")
}

model Nicho {
  id                 String           @id @default(cuid())
  unidadCementerioId String           @unique
  nivelVertical      Int
  capacidadUrnas     Int
  material           MaterialNicho
  medidaAlto         Float
  medidaAncho        Float
  medidaProfundidad  Float
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  unidadCementerio   UnidadCementerio @relation(fields: [unidadCementerioId], references: [id], onDelete: Cascade)

  @@map("nichos")
}

model Mausoleo {
  id                 String                   @id @default(cuid())
  unidadCementerioId String                   @unique
  dimensionLargo     Float
  dimensionAncho     Float
  capacidadPersonas  Int
  tipoConstruccion   TipoConstruccionMausoleo
  material           MaterialMausoleo
  niveles            Int
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
  unidadCementerio   UnidadCementerio         @relation(fields: [unidadCementerioId], references: [id], onDelete: Cascade)

  @@map("mausoleos")
}

model PerfilVendedor {
  id                    String         @id @default(cuid())
  usuarioId             String         @unique
  codigoVendedor        String         @unique
  especialidad          String?
  experienciaAnos       Int?           @default(0)
  telefono              String?
  direccion             String?
  fechaContratacion     DateTime?
  fechaTerminacion      DateTime?
  estado                EstadoVendedor @default(ACTIVO)
  comisionBase          Float          @default(0)
  comisionPorcentaje    Float          @default(0)
  comisionMinima        Float          @default(0)
  comisionMaxima        Float?
  metaMensual           Float?
  metaAnual             Float?
  observaciones         String?
  habilidades           String?
  certificaciones       String?
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  createdBy             String?
  updatedBy             String?
  creadoPorUsuario      Usuario?       @relation("PerfilVendedorCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario Usuario?       @relation("PerfilVendedorActualizadoPor", fields: [updatedBy], references: [id])
  usuario               Usuario        @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([usuarioId])
  @@index([codigoVendedor])
  @@index([estado])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("perfiles_vendedores")
}

model Cuota {
  id                      String                 @id @default(cuid())
  numeroCuota             Int
  monto                   Float
  fechaVencimiento        DateTime
  fechaPago               DateTime?
  montoPagado             Float                  @default(0)
  estado                  EstadoCuota            @default(PENDIENTE)
  observaciones           String?
  ventaLoteId             String?
  ventaUnidadCementerioId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               String?
  updatedBy               String?
  montoCapital            Float?                 @default(0)
  montoInteres            Float?                 @default(0)
  saldoCapitalAnterior    Float?                 @default(0)
  saldoCapitalPosterior   Float?                 @default(0)
  diasVencidos            Int?                   @default(0)
  interesMora             Float?                 @default(0)
  creadoPorUsuario        Usuario?               @relation("CuotaCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario   Usuario?               @relation("CuotaActualizadoPor", fields: [updatedBy], references: [id])
  ventaLote               VentaLote?             @relation(fields: [ventaLoteId], references: [id], onDelete: Cascade)
  ventaUnidadCementerio   VentaUnidadCementerio? @relation(fields: [ventaUnidadCementerioId], references: [id], onDelete: Cascade)
  pagos                   PagoCuota[]
  recibosPago             ReciboPago[]

  @@index([ventaLoteId])
  @@index([ventaUnidadCementerioId])
  @@index([estado])
  @@index([fechaVencimiento])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("cuotas")
}

model Auditoria {
  id           String    @id @default(cuid())
  tipo         String
  accion       String
  detalles     String?
  entidad      String?
  entidadId    String?
  ip           String?
  userAgent    String?
  fecha        DateTime  @default(now())
  leida        Boolean   @default(false)
  fechaLectura DateTime?
  usuarioId    String
  creadoPorId  String?
  creadoPor    Usuario?  @relation("AuditoriaCreadaPor", fields: [creadoPorId], references: [id])
  usuario      Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)

  @@index([fecha])
  @@index([tipo])
  @@index([usuarioId])
  @@index([entidad, entidadId])
}

model Notificacion {
  id            String    @id @default(cuid())
  titulo        String
  mensaje       String
  tipo          String
  leida         Boolean   @default(false)
  fechaLectura  DateTime?
  destinatarios String[]
  fecha         DateTime  @default(now())
  usuarioId     String?
  creadoPorId   String?
  creadoPor     Usuario?  @relation("NotificacionCreadaPor", fields: [creadoPorId], references: [id])
  usuario       Usuario?  @relation(fields: [usuarioId], references: [id])

  @@index([fecha])
  @@index([tipo])
  @@index([usuarioId])
  @@index([leida])
}

model ComprobantePago {
  id                      String                 @id @default(cuid())
  tipo                    String
  monto                   Float
  fecha                   DateTime
  descripcion             String?
  nombreArchivo           String
  driveFileId             String?
  driveFileUrl            String?
  driveDownloadUrl        String?
  mimeType                String
  tamanio                 Int
  ventaLoteId             String?
  ventaUnidadCementerioId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               String?
  updatedBy               String?
  guardadoLocal           Boolean                @default(false)
  localFilePath           String?
  ventaLote               VentaLote?             @relation(fields: [ventaLoteId], references: [id], onDelete: Cascade)
  ventaUnidadCementerio   VentaUnidadCementerio? @relation(fields: [ventaUnidadCementerioId], references: [id], onDelete: Cascade)
  pagosCuotas             PagoCuota[]
  recibosPago             ReciboPago[]
  pagosComisiones         PagoComision[]         @relation("ComprobantePagoToPagoComision")

  @@index([ventaLoteId])
  @@index([ventaUnidadCementerioId])
  @@index([tipo])
  @@index([fecha])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("comprobantes_pago")
}

model PagoCuota {
  id                    String           @id @default(cuid())
  monto                 Float
  fechaPago             DateTime
  observaciones         String?
  cuotaId               String
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  createdBy             String?
  updatedBy             String?
  comprobantePagoId     String?
  metodoPago            String?
  comprobantePago       ComprobantePago? @relation(fields: [comprobantePagoId], references: [id])
  creadoPorUsuario      Usuario?         @relation("PagoCuotaCreadoPor", fields: [createdBy], references: [id])
  cuota                 Cuota            @relation(fields: [cuotaId], references: [id], onDelete: Cascade)
  actualizadoPorUsuario Usuario?         @relation("PagoCuotaActualizadoPor", fields: [updatedBy], references: [id])

  @@index([cuotaId])
  @@index([comprobantePagoId])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("pagos_cuotas")
}

model PagoComision {
  id                      String                 @id @default(cuid())
  monto                   Float
  fechaPago               DateTime
  formaPago               FormaPago
  tipoPago                TipoPagoComision       @default(PARCIAL)
  observaciones           String?
  ventaLoteId             String?
  ventaUnidadCementerioId String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               String?
  updatedBy               String?
  creadoPorUsuario        Usuario?               @relation("PagoComisionCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario   Usuario?               @relation("PagoComisionActualizadoPor", fields: [updatedBy], references: [id])
  ventaLote               VentaLote?             @relation(fields: [ventaLoteId], references: [id], onDelete: Cascade)
  ventaUnidadCementerio   VentaUnidadCementerio? @relation(fields: [ventaUnidadCementerioId], references: [id], onDelete: Cascade)
  comprobantes            ComprobantePago[]      @relation("ComprobantePagoToPagoComision")

  @@index([ventaLoteId])
  @@index([ventaUnidadCementerioId])
  @@index([fechaPago])
  @@index([tipoPago])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("pagos_comisiones")
}

model CancelacionVenta {
  id                      String                 @id @default(cuid())
  ventaLoteId             String?
  ventaUnidadCementerioId String?
  tipoCancelacion         TipoCancelacion
  motivoCancelacion       String
  fechaSolicitud          DateTime               @default(now())
  fechaAprobacion         DateTime?
  fechaCompletada         DateTime?
  tipoDevolucion          TipoDevolucion
  montoDevolucion         Float?                 @default(0)
  porcentajeDevolucion    Float?                 @default(0)
  motivoDevolucion        String?
  observaciones           String?
  documentosRequeridos    String?
  condicionesEspeciales   String?
  estado                  EstadoCancelacion      @default(SOLICITADA)
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               String?
  updatedBy               String?
  aprobadoPor             String?
  aprobadoPorUsuario      Usuario?               @relation("CancelacionAprobadoPor", fields: [aprobadoPor], references: [id])
  creadoPorUsuario        Usuario?               @relation("CancelacionCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario   Usuario?               @relation("CancelacionActualizadoPor", fields: [updatedBy], references: [id])
  ventaLote               VentaLote?             @relation(fields: [ventaLoteId], references: [id], onDelete: Cascade)
  ventaUnidadCementerio   VentaUnidadCementerio? @relation(fields: [ventaUnidadCementerioId], references: [id], onDelete: Cascade)

  @@index([ventaLoteId])
  @@index([ventaUnidadCementerioId])
  @@index([tipoCancelacion])
  @@index([tipoDevolucion])
  @@index([estado])
  @@index([createdBy])
  @@index([updatedBy])
  @@index([aprobadoPor])
  @@map("cancelaciones_ventas")
}

model Contrato {
  id                      String                 @id @default(cuid())
  numeroContrato          String                 @unique
  tipoContrato            TipoContrato
  estado                  EstadoContrato         @default(BORRADOR)
  ventaLoteId             String?
  ventaUnidadCementerioId String?
  fechaContrato           DateTime               @default(now())
  precioTotal             Decimal                @db.Decimal(10, 2)
  montoInicial            Decimal?               @db.Decimal(10, 2)
  saldoPendiente          Decimal?               @db.Decimal(10, 2)
  numeroCuotas            Int?
  montoCuota              Decimal?               @db.Decimal(10, 2)
  frecuenciaCuota         FrecuenciaCuota?
  condicionesEspeciales   String?
  observaciones           String?
  contratoPDF             String?
  contratoWord            String?
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  createdBy               String?
  updatedBy               String?
  creadoPorUsuario        Usuario?               @relation("ContratoCreadoPor", fields: [createdBy], references: [id])
  actualizadoPorUsuario   Usuario?               @relation("ContratoActualizadoPor", fields: [updatedBy], references: [id])
  ventaLote               VentaLote?             @relation(fields: [ventaLoteId], references: [id])
  ventaUnidadCementerio   VentaUnidadCementerio? @relation(fields: [ventaUnidadCementerioId], references: [id])

  @@map("contratos")
}

model Reserva {
  id                    String            @id @default(cuid())
  numeroReserva         String            @unique
  proyectoId            String
  loteId                String?
  unidadCementerioId    String?
  clienteId             String
  vendedorId            String
  montoReserva          Decimal           @db.Decimal(10, 2)
  fechaReserva          DateTime          @default(now())
  fechaVencimiento      DateTime
  estado                EstadoReserva     @default(PENDIENTE)
  observaciones         String?
  ventaId               String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  createdBy             String?
  updatedBy             String?
  cliente               Cliente           @relation(fields: [clienteId], references: [id])
  creadoPorUsuario      Usuario?          @relation("ReservaCreadoPor", fields: [createdBy], references: [id])
  lote                  Lote?             @relation(fields: [loteId], references: [id])
  proyecto              Proyecto          @relation(fields: [proyectoId], references: [id])
  unidadCementerio      UnidadCementerio? @relation(fields: [unidadCementerioId], references: [id])
  actualizadoPorUsuario Usuario?          @relation("ReservaActualizadoPor", fields: [updatedBy], references: [id])
  vendedor              Usuario           @relation("ReservaVendedor", fields: [vendedorId], references: [id])
  venta                 VentaLote?        @relation(fields: [ventaId], references: [id])

  @@map("reservas")
}

model ReciboPago {
  id                      String                @id @default(cuid())
  numeroRecibo            String                @unique
  empresaDesarrolladoraId String
  ventaId                 String?
  cuotaId                 String?
  clienteId               String
  vendedorId              String
  montoPagado             Decimal               @db.Decimal(10, 2)
  formaPago               FormaPago
  metodoPago              String?
  concepto                String
  fechaPago               DateTime              @default(now())
  observaciones           String?
  comprobantePagoId       String?
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  createdBy               String?
  updatedBy               String?
  cliente                 Cliente               @relation(fields: [clienteId], references: [id])
  comprobantePago         ComprobantePago?      @relation(fields: [comprobantePagoId], references: [id])
  creadoPorUsuario        Usuario?              @relation("ReciboPagoCreadoPor", fields: [createdBy], references: [id])
  cuota                   Cuota?                @relation(fields: [cuotaId], references: [id])
  empresaDesarrolladora   EmpresaDesarrolladora @relation(fields: [empresaDesarrolladoraId], references: [id])
  actualizadoPorUsuario   Usuario?              @relation("ReciboPagoActualizadoPor", fields: [updatedBy], references: [id])
  vendedor                Usuario               @relation("ReciboPagoVendedor", fields: [vendedorId], references: [id])
  venta                   VentaLote?            @relation(fields: [ventaId], references: [id])

  @@index([empresaDesarrolladoraId])
  @@index([ventaId])
  @@index([cuotaId])
  @@index([clienteId])
  @@index([vendedorId])
  @@index([fechaPago])
  @@index([createdBy])
  @@index([updatedBy])
  @@map("recibos_pago")
}

enum Rol {
  SUPER_ADMIN
  ADMIN
  GERENTE_GENERAL
  DEVELOPER
  SALES_MANAGER
  SALES_REP
  SALES_ASSISTANT
  SALES_COORDINATOR
  PROJECT_MANAGER
  CONSTRUCTION_SUPERVISOR
  QUALITY_CONTROL
  PROJECT_ASSISTANT
  FINANCE_MANAGER
  ACCOUNTANT
  FINANCE_ASSISTANT
  INVESTOR
  GUEST
}

enum EstadoProyecto {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  PENDING_ASSIGNMENT
}

enum TipoProyecto {
  CASA_INDIVIDUAL
  CONDOMINIO_CASAS
  DEPARTAMENTO
  CONDOMINIO_DEPARTAMENTOS
  DUPLEX
  PENTHOUSE
  TOWNHOUSE
  CENTRO_COMERCIAL
  MODULO_COMERCIAL
  GALERIA_COMERCIAL
  PLAZA_COMERCIAL
  OFICINAS
  BODEGA
  SHOWROOM
  MIXTO_RESIDENCIAL_COMERCIAL
  MIXTO_OFICINAS_COMERCIAL
  LOTIZACION
  CEMENTERIO
  HOTEL
  HOSPITAL
  CLINICA
  COLEGIO
  UNIVERSIDAD
  ESTADIO
  COMPLEJO_DEPORTIVO
  PARQUE_INDUSTRIAL
}

enum EstadoUnidad {
  DISPONIBLE
  RESERVADO
  VENDIDO
  ENTREGADO
}

enum EstadoVenta {
  PENDIENTE
  APROBADA
  CANCELADA
  ENTREGADA
}

enum TipoBanco {
  BCP
  BBVA
  INTERBANK
  SCOTIABANK
  BANBIF
  MIBANCO
  BANCO_PICHINCHA
  BANCO_GNB
  BANCO_FALABELLA
  BANCO_RIPLEY
}

enum TipoBilleteraVirtual {
  YAPE
  PLIN
  TUNKI
  AGRARIO
  BIM
}

enum TipoCliente {
  INDIVIDUAL
  EMPRESA
}

enum EstadoCivil {
  SOLTERO
  CASADO
  DIVORCIADO
  VIUDO
}

enum Sexo {
  MASCULINO
  FEMENINO
}

enum TipoDireccion {
  NACIONAL
  EXTRANJERA
}

enum EstadoLote {
  DISPONIBLE
  RESERVADO
  VENDIDO
  ENTREGADO
  INACTIVO
  RETIRADO
  EN_VENTA
}

enum EstadoVentaLote {
  PENDIENTE
  APROBADA
  CANCELADA
  ENTREGADA
  DESAPROBADA
  EN_PROCESO_CANCELACION
  VIGENTE
  FINALIZADA
  REVERTIDA
}

enum EstadoVentaUnidadCementerio {
  PENDIENTE
  APROBADA
  CANCELADA
  ENTREGADA
  DESAPROBADA
  EN_PROCESO_CANCELACION
  VIGENTE
  FINALIZADA
  REVERTIDA
}

enum TipoUnidadCementerio {
  PARCELA
  NICHO
  MAUSOLEO
}

enum EstadoUnidadCementerio {
  DISPONIBLE
  RESERVADO
  VENDIDO
  OCUPADO
  INACTIVO
  RETIRADO
}

enum TipoTerreno {
  TIERRA
  CEMENTO
  JARDIN
  CESPED
}

enum MaterialNicho {
  CONCRETO
  MARMOL
  OTROS
}

enum MaterialMausoleo {
  LADRILLO
  CONCRETO
  GRANITO
  OTRO
}

enum TipoConstruccionMausoleo {
  FAMILIAR
  COLECTIVO
  OTRO
}

enum TipoVenta {
  CONTADO
  CUOTAS
}

enum FormaPago {
  EFECTIVO
  TRANSFERENCIA
  DEPOSITO
  CHEQUE
  TARJETA_CREDITO
  TARJETA_DEBITO
  YAPE
  PLIN
  OTRO
}

enum FrecuenciaCuota {
  MENSUAL
  BIMESTRAL
  TRIMESTRAL
  SEMESTRAL
  ANUAL
  PERSONALIZADA
}

enum ModeloAmortizacion {
  FRANCES
  ALEMAN
  JAPONES
}

enum EstadoDocumentacion {
  PENDIENTE
  EN_PROCESO
  COMPLETA
  INCOMPLETA
  VENCIDA
}

enum EstadoVendedor {
  ACTIVO
  INACTIVO
}

enum EstadoCuota {
  PENDIENTE
  PAGADA
  VENCIDA
  CANCELADA
  PARCIAL
}

enum TipoContrato {
  COMPRA_VENTA_LOTE
  COMPRA_VENTA_UNIDAD_CEMENTERIO
  PROMESA_COMPRA_VENTA
  CONTRATO_ARRIENDO
  CONTRATO_ADMINISTRACION
}

enum EstadoContrato {
  BORRADOR
  EN_REVISION
  APROBADO
  FIRMADO
  ENTREGADO
  ANULADO
}

enum TipoPagoComision {
  PARCIAL
  COMPLETO
}

enum TipoCancelacion {
  SOLICITUD_CLIENTE
  INCUMPLIMIENTO_CLIENTE
  PROBLEMAS_FINANCIEROS
  CAMBIO_PLANES
  PROBLEMAS_LEGALES
  OTRO
}

enum TipoDevolucion {
  DEVOLUCION_COMPLETA
  DEVOLUCION_PARCIAL
  SIN_DEVOLUCION
  CREDITO_FUTURO
  CAMBIO_PRODUCTO
}

enum EstadoCancelacion {
  SOLICITADA
  EN_REVISION
  APROBADA
  RECHAZADA
  COMPLETADA
}

enum EstadoReserva {
  PENDIENTE
  CONFIRMADA
  CONVERTIDA
  EXPIRADA
  CANCELADA
}
